<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Systrace性能分析</title>
      <link href="/2019/09/26/shi-yong-systrace-xing-neng-fen-xi/"/>
      <url>/2019/09/26/shi-yong-systrace-xing-neng-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="Systrace-概览"><a href="#Systrace-概览" class="headerlink" title="Systrace 概览"></a>Systrace 概览</h2><p><a href="https://developer.android.com/studio/profile/systrace" target="_blank" rel="noopener">https://developer.android.com/studio/profile/systrace</a></p><h2 id="Systrace环境配置"><a href="#Systrace环境配置" class="headerlink" title="Systrace环境配置"></a>Systrace环境配置</h2>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> systrace </tag>
            
            <tag> 性能分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何为TextView的drawable设置旋转动画</title>
      <link href="/2019/09/20/wei-textview-de-drawable-she-zhi-dong-hua/"/>
      <url>/2019/09/20/wei-textview-de-drawable-she-zhi-dong-hua/</url>
      
        <content type="html"><![CDATA[<p>本文展示了 <code>RotateDrawable</code> 与 <code>AnimatedRotateDrawable</code> 两种实现方式。<br>如有更好的实现方式欢迎在本文底部评论区交流讨论。</p><h2 id="RotateDrawable"><a href="#RotateDrawable" class="headerlink" title="RotateDrawable"></a>RotateDrawable</h2><p><code>RotateDrawable</code> 用来对 <code>Drawable</code> 进行旋转，可以通过其<code>setLevel()</code> 方法来控制 <code>Drawable</code> 的旋转，level的最大值是 10000。</p><p><code>RotateDrawable</code> 可以在XML文件中定义<code>&lt;rotate&gt;</code> 元素使用。</p><h3 id="XML-属性"><a href="#XML-属性" class="headerlink" title="XML 属性"></a>XML 属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>android:fromDegrees</td><td>起始的角度，对应最低的level值，默认0</td></tr><tr><td>android:toDegrees</td><td>结束角度，对应最高的level值，默认360</td></tr><tr><td>android:pivotX</td><td>参照点的x坐标，取值为 0~1，默认是50%，即0.5</td></tr><tr><td>android:pivotY</td><td>参照点的Y坐标，取值为 0~1，默认是50%，即0.5</td></tr><tr><td>android:drawable</td><td>drawable资源</td></tr><tr><td>android:visible</td><td>drawable是否可见</td></tr></tbody></table><h3 id="角度坐标系"><a href="#角度坐标系" class="headerlink" title="角度坐标系"></a>角度坐标系</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/textview_drawable_roate/rotatedrawable_xy.png" alt></p><h3 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/textview_drawable_roate/textview_refresh.gif" alt></p><ol><li><p>在Android Studio中，在工程的res目录，分别创建两个资源文件 <code>textview_refresh.png</code>，<code>textview_refresh_rotate.xml</code> 如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/textview_drawable_roate/refresh_res_drawable.png" alt></p></li><li><p>编辑 <code>textview_refresh_rotate.xml</code> 的文件内容：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rotate</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/textview_refresh<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>fromDegrees</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>pivotX</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>pivotY</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>toDegrees</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>359<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li><li><p>为TextView的设置 <code>RotateDrawable</code></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//获取 RotateDrawable 对象</span><span class="token keyword">val</span> drawable <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>textview_refresh_rotate<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定制Drawable的大小</span>drawable<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> drawable<span class="token punctuation">.</span>intrinsicWidth<span class="token punctuation">,</span> drawable<span class="token punctuation">.</span>intrinsicHeight<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//为TextView设置drawableLeft</span>refresh_tv<span class="token punctuation">.</span><span class="token function">setCompoundDrawables</span><span class="token punctuation">(</span>drawable<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span></code></pre></li><li><p>让 <code>RotateDrawable</code> 旋转起来</p><p>创建属性动画</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//通过属性动画设置drawable的level值</span>mRefreshAnimator <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofInt</span><span class="token punctuation">(</span>drawable<span class="token punctuation">,</span> <span class="token string">"level"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>mRefreshAnimator<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>    duration <span class="token operator">=</span> <span class="token number">600</span> <span class="token comment" spellcheck="true">//动画执行600ms</span>    repeatCount <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token comment" spellcheck="true">//无限执行次数</span>    interpolator <span class="token operator">=</span> <span class="token function">LinearInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//匀速插值器</span><span class="token punctuation">}</span></code></pre><p>点击TextView让RotateDrawable旋转起来</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onClick</span><span class="token punctuation">(</span>v<span class="token operator">:</span> View<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">when</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>         R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>refresh_tv <span class="token operator">-></span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>mRefreshCount <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 mRefreshAnimator<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//启动动画</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                 mRefreshAnimator<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//取消动画</span>             <span class="token punctuation">}</span>             mRefreshCount<span class="token operator">++</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h2 id="AnimatedRotateDrawable"><a href="#AnimatedRotateDrawable" class="headerlink" title="AnimatedRotateDrawable"></a>AnimatedRotateDrawable</h2><p><code>AnimatedRotateDrawable</code> 是Android系统的隐藏API<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/textview_drawable_roate/animated_rotate_drawable_class.png" alt></p><p><code>AnimatedRotateDrawable</code> 就是Android系统自身使用的。对外部隐藏，所以不能通过手动创建对象的方式使用。<br>虽然开发者可以通过XML的方式使用，但使用XML方式也很局限，只能使用其3个属性，而且无法设置其旋转的速度。不推荐在项目中使用。</p><h3 id="实现示例-1"><a href="#实现示例-1" class="headerlink" title="实现示例"></a>实现示例</h3><p>以下 <code>AnimatedRotateDrawable</code> 实现方式仅供参考。</p><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/textview_drawable_roate/textview_refresh2.gif" alt></p><ol><li><p>在Android Studio中，在工程的res/drawable目录创建weather_refresh_rotate2.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>animated-rotate</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>drawable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/home_weather_refresh<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>pivotX</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>pivotY</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li><li><p>为TextView的设置 <code>AnimatedRotateDrawable</code></p><pre class=" language-kotlin"><code class="language-kotlin">mAnimatedDrawable <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">getDrawable</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>weather_refresh_rotate2<span class="token punctuation">)</span>     mAnimatedDrawable<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>         <span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>intrinsicWidth<span class="token punctuation">,</span>intrinsicWidth<span class="token punctuation">)</span>     <span class="token punctuation">}</span>refresh_tv<span class="token punctuation">.</span><span class="token function">setCompoundDrawables</span><span class="token punctuation">(</span>mAnimatedDrawable<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span></code></pre></li><li><p>让 <code>AnimatedRotateDrawable</code> 旋转起来</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onClick</span><span class="token punctuation">(</span>v<span class="token operator">:</span> View<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">when</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>refresh_tv <span class="token operator">-></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mRefreshCount <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span>mAnimatedDrawable <span class="token keyword">as</span><span class="token operator">?</span> Animatable<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//启动动画</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span>mAnimatedDrawable <span class="token keyword">as</span><span class="token operator">?</span> Animatable<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//取消动画</span>            <span class="token punctuation">}</span>            mRefreshCount<span class="token operator">++</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><blockquote><p><a href="https://github.com/congwiny/BlogProjectCode/commit/29ec440733d7e8216292b52f2a4f7f86a4461c66" target="_blank" rel="noopener">Visit Demo Source Code</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> textview </tag>
            
            <tag> animation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + GitHub Pages使用自定义域名</title>
      <link href="/2019/09/19/hexo-custom-domain/"/>
      <url>/2019/09/19/hexo-custom-domain/</url>
      
        <content type="html"><![CDATA[<h2 id="域名申请"><a href="#域名申请" class="headerlink" title="域名申请"></a>域名申请</h2><p>在域名商那边购买域名，我选择在腾讯云购买域名。</p><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/github_pages_domain/tengxun_domain_2.jpg" alt></p><p>购买成功之后，进入腾讯云的域名管理<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/github_pages_domain/domain_m1.jpg" alt></p><p>点击解析按钮<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/github_pages_domain/domain_m2.jpg" alt></p><p>添加以下2个记录就可以了<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/github_pages_domain/domain_m3.jpg" alt></p><h2 id="GitHub-Pages配置"><a href="#GitHub-Pages配置" class="headerlink" title="GitHub Pages配置"></a>GitHub Pages配置</h2><p>到GitHub的博客仓库，点击设置，然后修改Custom domain为自己的域名即可。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/github_pages_domain/github_pages_custom_domain.jpg" alt></p><h2 id="Gitalk配置"><a href="#Gitalk配置" class="headerlink" title="Gitalk配置"></a>Gitalk配置</h2><p>如果之前博客配置了Gitalk评论模块，就需要改一下OAuth Apps的callback URL，否则Gitalk评论模块无法激活。</p><p>设置路径：Settings -&gt;Develop Settings -&gt; OAuth Apps</p><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/github_pages_domain/oauth_app_comments.jpg" alt></p><p>在页面底部，修改callback URL为自己申请域名的URL：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/github_pages_domain/oauth_app_callback_url.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gitpages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin嵌套类与内部类</title>
      <link href="/2019/09/09/kotlin-qian-tao-lei-yu-nei-bu-lei/"/>
      <url>/2019/09/09/kotlin-qian-tao-lei-yu-nei-bu-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="Kotlin嵌套类与内部类"><a href="#Kotlin嵌套类与内部类" class="headerlink" title="Kotlin嵌套类与内部类"></a>Kotlin嵌套类与内部类</h1><h2 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h2><p>嵌套类就是类中的类，类可以嵌套在其他类中，可以嵌套多层。<br>访问嵌套类（Nested Class）的方式是直接使用“类名.”，有多少层嵌套，就用多少层类名加点号来访问。<br>嵌套类没有持有外部类的引用，所以是无法访问外部类的变量。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>类可以标记为 <strong>inner</strong> 以便能够访问外部类的成员，这样的类叫内部类（Inner Class）。内部类会持有一个对外部类的对象的引用。</p><h2 id="嵌套类、内部类的构造和使用"><a href="#嵌套类、内部类的构造和使用" class="headerlink" title="嵌套类、内部类的构造和使用"></a>嵌套类、内部类的构造和使用</h2><p>下面例子展示了Button类的 <strong>嵌套类</strong>，<strong>内部类</strong>，以及 <strong>匿名内部类</strong> 的构造和使用。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token keyword">interface</span> State <span class="token operator">:</span> Serializable<span class="token keyword">interface</span> View <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> State    <span class="token keyword">fun</span> <span class="token function">restoreState</span><span class="token punctuation">(</span>state<span class="token operator">:</span> State<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> OnClickListener <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">onClick</span><span class="token punctuation">(</span>v<span class="token operator">:</span> View<span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> Button <span class="token operator">:</span> View <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> State <span class="token operator">=</span> <span class="token function">ButtonState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> mPrivateFlags<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> mListener<span class="token operator">:</span> OnClickListener<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">restoreState</span><span class="token punctuation">(</span>state<span class="token operator">:</span> State<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">restoreState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 此类没有显示修饰符，称为嵌套类。     * 嵌套类与Java中的static嵌套类是一样的     * 不会存储（持有）外部类的引用     */</span>    <span class="token keyword">class</span> ButtonState <span class="token operator">:</span> State <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//对应Java中的static class ButtonState</span>    <span class="token comment" spellcheck="true">/**     * 此类有inner修饰符，称为内部类     * 内部类与Java中的非static内部类是一样的     * 会存储（持有）外部类的引用     */</span>    <span class="token keyword">inner</span> <span class="token keyword">class</span> ButtonState2 <span class="token operator">:</span> State <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//对应Java中的class ButtonState2</span>        <span class="token comment" spellcheck="true">/**         * 在内部类中获取外部类的实例         */</span>        <span class="token keyword">fun</span> <span class="token function">getOuterReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Button <span class="token operator">=</span> <span class="token keyword">this</span><span class="token label symbol">@Button</span>        <span class="token keyword">fun</span> <span class="token function">accessOutter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"accessOuter flag=<span class="token interpolation variable">$mPrivateFlags</span>"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 关于匿名内部类（Annonymous Inner Class）：         * 匿名内部类就是没有名字的内部类。既然是内部类，那么它自然也可以访问外部类的变量。         */</span>        mListener <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> OnClickListener <span class="token punctuation">{</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onClick</span><span class="token punctuation">(</span>v<span class="token operator">:</span> View<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"onClick mPrivateFlags=<span class="token interpolation variable">$mPrivateFlags</span>"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//嵌套类不需要构造外部类对象</span>    <span class="token keyword">val</span> state <span class="token operator">=</span> Button<span class="token punctuation">.</span><span class="token function">ButtonState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//内部类要先构造外部类对象</span>    <span class="token keyword">val</span> state2 <span class="token operator">=</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ButtonState2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    state2<span class="token punctuation">.</span><span class="token function">accessOutter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//accessOuter flag=1</span>    <span class="token keyword">val</span> btn <span class="token operator">=</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    btn<span class="token punctuation">.</span>mListener<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//onClick mPrivateFlags=1</span><span class="token punctuation">}</span></code></pre><h2 id="Java对Kotlin嵌套类-内部类的访问"><a href="#Java对Kotlin嵌套类-内部类的访问" class="headerlink" title="Java对Kotlin嵌套类/内部类的访问"></a>Java对Kotlin嵌套类/内部类的访问</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NestedClassTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Button<span class="token punctuation">.</span>ButtonState state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button<span class="token punctuation">.</span>ButtonState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button<span class="token punctuation">.</span>ButtonState2 state2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">ButtonState2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        state2<span class="token punctuation">.</span><span class="token function">accessOutter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Button btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">getMListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>由上面的内部类 <strong>ButtonState2</strong> 访问外部类 <strong>Button</strong> 的 <strong>mPrivateFlags</strong> 变量，可知Kotlin内部类可以访问外部类的私有成员。<br>但有一点与Java不同，Kotlin的外部类无法访问内部类的私有成员：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181511.png" alt><br>但Java的外部类可以访问内部类私有成员：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181521.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> 嵌套类与内部类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin解构声明</title>
      <link href="/2019/09/09/kotlin-jie-gou-sheng-ming/"/>
      <url>/2019/09/09/kotlin-jie-gou-sheng-ming/</url>
      
        <content type="html"><![CDATA[<p>解构声明：这个功能允许你展开单个复合值，并使用它来初始化多个单独的变量。<br>任何表达式都可以出现在解构声明的右侧，只要可以对它调用所需数量的 component 函数即可。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * 要在解构声明中初始化每个变量，会调用名为componentN的函数，其中N是声明中变量的位置。 */</span><span class="token keyword">class</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">val</span> x<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 手动为非数据类实现解构功能     * 注意：componentN() 函数需要用 operator 关键字标记，以允许在解构声明中使用它们。     */</span>    operator <span class="token keyword">fun</span> <span class="token function">component1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> x    operator <span class="token keyword">fun</span> <span class="token function">component2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> y<span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x=<span class="token interpolation variable">$x</span>,y=<span class="token interpolation variable">$y</span>"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// x=10,y=20</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * 对于数据类，编译器为每个在主构造方法中声明的属性生成一个componentN函数。 */</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Point2</span><span class="token punctuation">(</span><span class="token keyword">val</span> x<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Point2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x=<span class="token interpolation variable">$x</span>,y=<span class="token interpolation variable">$y</span>"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//x=10,y=20</span><span class="token punctuation">}</span></code></pre><p>数据对象是一个数据容器，可以理解为多个相关数据被打包到一个对象中。<br>解构进行相反的操作，是将数据对象拆开将内部的属性取出，赋值给不同的变量。<br>解构不仅仅适用于数据对象，也适用于集合数组对象。<br>注意：对于数据对象，定义componentN函数的数量没有限制，但是对于集合数组只允许使用此语法来访问其对象中的前五个元素。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span>            <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token string">"male"</span><span class="token punctuation">,</span>            <span class="token string">"Beijing"</span><span class="token punctuation">,</span>            <span class="token string">"1234556"</span><span class="token punctuation">,</span>            <span class="token string">"Jack@gmail.com"</span><span class="token punctuation">,</span>            <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token string">"Programmer"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> address<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> email<span class="token punctuation">,</span> marry<span class="token punctuation">,</span> job<span class="token punctuation">)</span> <span class="token operator">=</span> person    <span class="token function">println</span><span class="token punctuation">(</span><span class="token raw-string string">"""name=<span class="token interpolation variable">$name</span>,        |age=<span class="token interpolation variable">$age</span>,        |sex=<span class="token interpolation variable">$sex</span>,        |address=<span class="token interpolation variable">$address</span>,        |phone=<span class="token interpolation variable">$phone</span>,        |email=<span class="token interpolation variable">$email</span>,        |marry=<span class="token interpolation variable">$marry</span>,        |job=<span class="token interpolation variable">$job</span>"""</span><span class="token punctuation">.</span><span class="token function">trimMargin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span>                  <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span>                  <span class="token keyword">val</span> sex<span class="token operator">:</span> String<span class="token punctuation">,</span>                  <span class="token keyword">val</span> address<span class="token operator">:</span> String<span class="token punctuation">,</span>                  <span class="token keyword">val</span> phone<span class="token operator">:</span> String<span class="token punctuation">,</span>                  <span class="token keyword">val</span> email<span class="token operator">:</span> String<span class="token punctuation">,</span>                  <span class="token keyword">val</span> marry<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>                  <span class="token keyword">val</span> job<span class="token operator">:</span> String<span class="token punctuation">)</span></code></pre><p>只允许访问集合的前五个元素：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181635.png" alt><br>&nbsp;<br>Kotlin API中为集合定义了5个componentN函数：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181645.png" alt><br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181654.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> 解构声明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin操作符重载</title>
      <link href="/2019/09/02/kotlin-cao-zuo-fu-chong-zai/"/>
      <url>/2019/09/02/kotlin-cao-zuo-fu-chong-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><h2 id="操作符优先级"><a href="#操作符优先级" class="headerlink" title="操作符优先级"></a>操作符优先级</h2><p>Kotlin操作符的优先级如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551270146784.png" alt></p><p>为实现这些的操作符，Kotlin为二元操作符左侧的类型和一元操作符的参数类型，提供了相应的函数或扩展函数。</p><p>例如在kotlin/core/builtins/native/kotlin/Primitives.kt代码中，对基本类型Int的操作符的实现代码如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">class</span> Int <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>Int<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token operator">..</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Byte<span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Short<span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token keyword">public</span> <span class="token keyword">override</span> operator <span class="token keyword">fun</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Float<span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Double<span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Byte<span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Short<span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int<span class="token operator">/</span>    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> Long    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Float<span class="token punctuation">)</span><span class="token operator">:</span> Float    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Double<span class="token punctuation">)</span><span class="token operator">:</span> Double    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">minus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Byte<span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">minus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Short<span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">minus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">minus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> Long    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">minus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Float<span class="token punctuation">)</span><span class="token operator">:</span> Float    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">minus</span><span class="token punctuation">(</span>other<span class="token operator">:</span> Double<span class="token punctuation">)</span><span class="token operator">:</span> Double    …    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Byte    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Char    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Short    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Long    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Float    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Double<span class="token punctuation">}</span></code></pre><h2 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h2><p>从上面代码可以看出，重载操作符的函数需要用operator修饰符标记。</p><h3 id="一元操作"><a href="#一元操作" class="headerlink" title="一元操作"></a>一元操作</h3><p>一元操作符（unary operation），包括前缀、递增和递减</p><h4 id="前缀操作符"><a href="#前缀操作符" class="headerlink" title="前缀操作符"></a>前缀操作符</h4><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551319051663.png" alt><br>例如，当编译器处理表达式+a时，将执行以下步骤：</p><pre><code>1）确定a的类型，令其为T。2）为接收者T查找一个带有operator修饰符的无参函数unaryPlus（），即成员函数或扩展函数。3）如果函数不存在或不明确，则导致编译错误。4）如果函数存在且其返回类型为R，则表达式+a具有类型R。</code></pre><p>编译器对这些操作以及所有其他操作都针对基本类型做了优化，不会引入函数调用的开销。<br>示例：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">val</span> x<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//简便写法：operator fun Point.unaryMinus() = Point(-x, -y)</span>operator <span class="token keyword">fun</span> Point<span class="token punctuation">.</span><span class="token function">unaryMinus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Point <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">,</span> <span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> p <span class="token operator">=</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/*       -p -> p.unaryMinus()     */</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">-</span>p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Point(x=-10, y=-20)</span><span class="token punctuation">}</span></code></pre><h4 id="递增和递减"><a href="#递增和递减" class="headerlink" title="递增和递减"></a>递增和递减</h4><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551320247231.png" alt><br>inc()和dec()函数必须返回一个值，它用于赋值给使用++或–操作的变量。<br>编译器解析后缀形式的操作符，例如a++（a–同理)，步骤：</p><pre><code>1）确定a的类型，令其为T。2）查找一个适用于类型为T的接收者的、带有operator修饰符的无参数函数inc（）。3）检查函数的返回类型是T的子类型。</code></pre><p>计算表达式的步骤：</p><pre><code>1）把a的初始值存储到临时存储a_中。2）把a.inc（）结果赋值给a。3）把a_作为表达式的结果返回。</code></pre><p>对于前缀形式++a和–a解析步骤类似，但是返回值是取新值来返回：</p><pre><code>1）把a.inc（）结果赋值给a。2）把a的新值a+1作为表达式结果返回。</code></pre><h3 id="二元操作"><a href="#二元操作" class="headerlink" title="二元操作"></a>二元操作</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181616.png" alt><br>注意：自 Kotlin 1.1 起支持 rem 运算符。Kotlin 1.0 使用 mod 运算符，它在 Kotlin 1.1 中被弃用。<br>示例：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token keyword">val</span> dayIndex<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>    operator <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>increment<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Counter <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">Counter</span><span class="token punctuation">(</span>dayIndex <span class="token operator">+</span> increment<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> counter <span class="token operator">=</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>counter <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Counter(dayIndex=6)</span><span class="token punctuation">}</span></code></pre><h4 id="“In”-操作符"><a href="#“In”-操作符" class="headerlink" title="“In” 操作符"></a>“In” 操作符</h4><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181616.png" alt></p><h4 id="索引访问操作符"><a href="#索引访问操作符" class="headerlink" title="索引访问操作符"></a>索引访问操作符</h4><p>方括号转换为调用带有适当数量参数的 get 和 set。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181625.png" alt></p><h4 id="中缀操作符"><a href="#中缀操作符" class="headerlink" title="中缀操作符"></a>中缀操作符</h4><p>标有 infix 关键字的函数也可以使用中缀表示法（忽略该调用的点与圆括号）调用。<br>中缀函数必须满足以下要求：</p><pre><code>它们必须是成员函数或扩展函数；它们必须只有一个参数；其参数不得接受可变数量的参数且不能有默认值。</code></pre><p>中缀函数调用的优先级低于算术操作符、类型转换以及 rangeTo 操作符。<br>以下表达式是等价的：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token number">1</span> <span class="token operator">shl</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> 与 <span class="token number">1</span> <span class="token function">shl</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">0</span> until n <span class="token operator">*</span> <span class="token number">2</span> 与 <span class="token number">0</span> <span class="token function">until</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>xs union ys <span class="token keyword">as</span> Set<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span> 与 xs <span class="token function">union</span> <span class="token punctuation">(</span>ys <span class="token keyword">as</span> Set<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">)</span></code></pre><p>另一方面，中缀函数调用的优先级高于布尔操作符 &amp;&amp; 与 ||、is- 与 in- 检测以及其他一些操作符。这些表达式也是等价的：</p><pre class=" language-kotlin"><code class="language-kotlin">a <span class="token operator">&amp;&amp;</span> b <span class="token operator">xor</span> c 与 a <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b <span class="token operator">xor</span> c<span class="token punctuation">)</span>a <span class="token operator">xor</span> b <span class="token keyword">in</span> c 与 <span class="token punctuation">(</span>a <span class="token operator">xor</span> b<span class="token punctuation">)</span> <span class="token keyword">in</span> c</code></pre><p>自定义infix函数来实现中缀操作符：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span>infix <span class="token keyword">fun</span> Person<span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span>years<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Person <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age <span class="token operator">+</span> years<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">grow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Person(name=Jack, age=22)</span>    <span class="token function">println</span><span class="token punctuation">(</span>person grow <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Person(name=Jack, age=22)</span><span class="token punctuation">}</span></code></pre><blockquote><p>详细参考：<a href="https://kotlinlang.org/docs/reference/operator-overloading.html" target="_blank" rel="noopener">操作符重载</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> 操作符重载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin反射的使用</title>
      <link href="/2019/08/30/kotlin-fan-she-de-shi-yong/"/>
      <url>/2019/08/30/kotlin-fan-she-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>反射（Reflection）是程序的自我分析能力，通过反射机制能够动态读取一个类的信息，可以确定类中有哪些函数、构造函数以及属性，并且能够在运行时动态加载类。</p><p>在Kotlin中有两种方式来实现反射的功能。一种是调用Java的反射包java.lang.reflect下面的API，另外一种方式就是直接调用Kotlin语言提供的kotlin.reflect包下面的API。</p><p>因为反射功能并非所有编程场景都用到，所以Kotlin把kotlin.reflect包的实现放到了单独的kotlin-reflect.jar里面。</p><p>如果需要使用Kotlin的反射功能，以Gradle为例，需要在build.gradle配置文件中添加以下依赖：</p><pre class=" language-gradle"><code class="language-gradle">compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"</code></pre><h2 id="Kotlin反射API"><a href="#Kotlin反射API" class="headerlink" title="Kotlin反射API"></a>Kotlin反射API</h2><p>Kotlin反射API主要来自于kotlin.reflect、kotlin.reflect.full和kotlin.reflect.jvm包。<br>其中kotlin.reflect和kotlin.reflect.full是主要的Kotlin反射API，而kotlin.reflect.jvm包主要用于Kotlin反射和Java反射的互操作。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181704.png" alt><br>&nbsp;<br>Kotlin反射API类的层次结构图：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181712.png" alt></p><p>kotlin.reflect包是Kotlin反射核心API，它们都是接口。</p><p>类说明：</p><ul><li>KClass：表示一个具有反射功能的类。</li><li>KParameter：表示一个具有反射功能的可传递给函数或属性的参数。</li><li>KCallable：表示具有反射功能的可调用实体，包括属性和函数，它的直接子接口有KProperty和KFunction。</li><li>KFunction：表示一个具有反射功能的函数。</li><li>KProperty：表示一个具有反射功能的属性。</li><li>KMutableProperty：表示一个具有反射功能的使用var声明的属性。</li></ul><h2 id="类引用"><a href="#类引用" class="headerlink" title="类引用"></a>类引用</h2><p>对类的引用是通过KClass实现的，KClass是实现反射的关键所在，KClass的一个实例表示对类的引用。<br>在程序代码中引用类使用 <code>::</code> 运算符，引用类有两种形式：类名<code>::</code>class和对象<code>::</code>class，它们获取的都是相同的KClass实例。</p><p>引用类的示例代码如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//1.获得“类名::class”引用类</span><span class="token keyword">val</span> clz1 <span class="token operator">=</span> Int<span class="token operator">::</span><span class="token keyword">class</span><span class="token keyword">val</span> clz2 <span class="token operator">=</span> Person<span class="token operator">::</span><span class="token keyword">class</span><span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2.获得“对象::class”引用类 (Kotlin 1.1 绑定的类引用)</span><span class="token keyword">val</span> clz3 <span class="token operator">=</span> person<span class="token operator">::</span><span class="token keyword">class</span></code></pre><p>注意：Kotlin 类引用与 Java 类引用不同。要获得 Java 类引用， 请在 KClass 实例上使用 .java 属性或者使用类对象的javaClass扩展属性。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//返回一个KClass&lt;Person>的实例</span><span class="token keyword">val</span> kClass <span class="token operator">=</span> person<span class="token punctuation">.</span>javaClass<span class="token punctuation">.</span>kotlin<span class="token function">println</span><span class="token punctuation">(</span>kClass <span class="token operator">===</span> Person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token keyword">val</span> jClass <span class="token operator">=</span> kClass<span class="token punctuation">.</span>java<span class="token keyword">val</span> jClass2 <span class="token operator">=</span> person<span class="token punctuation">.</span>javaClass<span class="token function">println</span><span class="token punctuation">(</span>jClass<span class="token operator">===</span>jClass2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span></code></pre><h2 id="可调用引用"><a href="#可调用引用" class="headerlink" title="可调用引用"></a>可调用引用</h2><p>函数、属性以及构造函数的引用，除了作为自省程序结构外， 还可以用于调用或者用作函数类型的实例。<br>所有可调用引用的公共超类型是 KCallable<out r>， 其中 R 是返回值类型，对于属性是属性类型，对于构造函数是所构造类型。</out></p><h3 id="函数引用"><a href="#函数引用" class="headerlink" title="函数引用"></a>函数引用</h3><p>通过反射调用函数需要KFunction实例，KFunction实例可以通过两种方式获得：一个是函数引用；另一个是通过KClass提供的API获得KFunction实例。<br>函数引用使用 <code>::</code> 运算符，可以引用顶层函数也可引用类中成员函数。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">isOdd</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span></code></pre><p>我们可以直接调用它（isOdd(5)），但是我们也可以将其作为一个函数类型的值，例如将其传给另一个函数。为此，我们使用 <code>::</code> 操作符：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">isOdd</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//sampleStart</span>    <span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token operator">::</span>isOdd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1,3]</span>    <span class="token comment" spellcheck="true">//sampleEnd</span><span class="token punctuation">}</span></code></pre><p>这里 <code>::</code>isOdd 是函数类型 (Int) -&gt; Boolean 的一个值。<br>函数引用属于 KFunction<out r> 的子类型之一，取决于参数个数，例如 KFunction3&lt;T1, T2, T3, R&gt;。<br>因此 <code>::</code>isOdd表达式的类型也是KFunction1&lt;Int, Boolean&gt;，它包含了形参类型和返回类型的信息，1表示这个函数接收一个形参，Int表示形参类型，Boolean表示函数返回类型。<br>&nbsp;<br>像KFunctionN这种类型称为合成的编译器生成类型，你不会在包kotlin.reflect中找到它们的声明。<br>每个KFunctionN类型都继承了KFunction并额外加上了一个成员方法invoke，可以使用KFunctionN接口的invoke方法来调用对应函数。</out></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">,</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> sumFun<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">-></span> Int <span class="token operator">=</span> <span class="token operator">::</span>sum    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sumFun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//一个函数类型的变量（函数引用）属于 KFunction&lt;out R> 的子类型</span>    <span class="token keyword">val</span> kFunction2<span class="token operator">:</span> KFunction2<span class="token operator">&lt;</span>Int<span class="token punctuation">,</span> Int<span class="token punctuation">,</span> Int<span class="token operator">></span> <span class="token operator">=</span> <span class="token operator">::</span>sum    <span class="token function">println</span><span class="token punctuation">(</span>kFunction2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">kFunction2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//10</span>    <span class="token comment" spellcheck="true">//KFunction接口继承自KCallable和Function</span>    <span class="token keyword">val</span> sumFun2 <span class="token operator">=</span> <span class="token operator">::</span>sum    <span class="token comment" spellcheck="true">/**     * 调用KCallable接口的call方法，传入可变参数，因为call方法是对所有类型都有效的通用手段，但它不提供类型安全性。     * 如果用错误数量的实参去调用函数，就会抛出一个运行时异常IllegalArgumentException     */</span>    <span class="token function">println</span><span class="token punctuation">(</span>sumFun2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//调用KCallable接口的call方法</span>    <span class="token function">println</span><span class="token punctuation">(</span>sumFun2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//调用Function接口的invoke方法</span>    <span class="token comment" spellcheck="true">//会被编译成sumFun2.invoke(1, 3)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">sumFun2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>当上下文中已知函数期望的类型时，<code>::</code> 可以用于重载函数。 例如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">isOdd</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span>    <span class="token keyword">fun</span> <span class="token function">isOdd</span><span class="token punctuation">(</span>s<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> s <span class="token operator">==</span> <span class="token string">"brillig"</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">"slithy"</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">"tove"</span>    <span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token operator">::</span>isOdd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 引用到 isOdd(x: Int)</span><span class="token punctuation">}</span></code></pre><p>或者，你可以通过将方法引用存储在具有显式指定类型的变量中来提供必要的上下文：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> predicate<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-></span> Boolean <span class="token operator">=</span> <span class="token operator">::</span>isOdd   <span class="token comment" spellcheck="true">// 引用到 isOdd(x: String)</span></code></pre><p>&nbsp;<br>如果我们需要使用类的成员函数或扩展函数，并且有多个重载函数，它需要是类型限定的，例如 String<code>::</code>toCharArray。</p><p>示例1：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//String类里有2个toCharArray函数，需要指定类型限定：(String) -> CharArray</span><span class="token keyword">val</span> toCharArrayFun<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-></span> CharArray <span class="token operator">=</span> String<span class="token operator">::</span>toCharArray<span class="token keyword">val</span> arr <span class="token operator">=</span> toCharArrayFun<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 或者使用toCharArrayFun("abcd")</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>示例2：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Calc <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">isOdd</span><span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span>    <span class="token keyword">fun</span> <span class="token function">isOdd</span><span class="token punctuation">(</span>s<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> s <span class="token operator">==</span> <span class="token string">"brillig"</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">"slithy"</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">"tove"</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> calc <span class="token operator">=</span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//isOddFun类型限定</span>    <span class="token keyword">val</span> isOddFun<span class="token operator">:</span> <span class="token punctuation">(</span>Calc<span class="token punctuation">,</span> String<span class="token punctuation">)</span> <span class="token operator">-></span> Boolean <span class="token operator">=</span> Calc<span class="token operator">::</span>isOdd    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isOddFun</span><span class="token punctuation">(</span>calc<span class="token punctuation">,</span> <span class="token string">"tove"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>    <span class="token keyword">val</span> isOddFun2<span class="token operator">:</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> <span class="token operator">-></span> Boolean <span class="token operator">=</span> calc<span class="token operator">::</span>isOdd    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isOddFun2</span><span class="token punctuation">(</span><span class="token string">"brillig"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token punctuation">}</span></code></pre><p>&nbsp;<br><strong>获取成员函数和扩展函数的引用</strong></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>full<span class="token punctuation">.</span>createInstance<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>full<span class="token punctuation">.</span>functions<span class="token keyword">class</span> Person <span class="token punctuation">{</span>    <span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">var</span> age<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">//成员函数</span>    <span class="token keyword">fun</span> <span class="token function">setNameAndAge</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">,</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person [name=<span class="token interpolation variable">$name</span>, age=<span class="token interpolation variable">$age</span>]"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Person扩展函数</span><span class="token keyword">fun</span> Person<span class="token punctuation">.</span><span class="token function">getNameAndAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"name=<span class="token interpolation variable">$name</span>,age=<span class="token interpolation variable">$age</span>"</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> clz <span class="token operator">=</span> Person<span class="token operator">::</span><span class="token keyword">class</span>    <span class="token keyword">val</span> person <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    clz<span class="token punctuation">.</span>functions<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//KClass提供的API获得KFunction实例</span>    <span class="token keyword">val</span> pfn1 <span class="token operator">=</span> clz<span class="token punctuation">.</span>functions<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    pfn1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>    <span class="token keyword">val</span> pfn2 <span class="token operator">=</span> Person<span class="token operator">::</span>setNameAndAge <span class="token comment" spellcheck="true">//KFunction3&lt;Person,String,Int,Unit></span>    <span class="token function">pfn2</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"Tony"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Person [name=Tom, age=20]</span>    <span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Person [name=Tony, age=18]</span>    pfn2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"Ben"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Person [name=Ben, age=28]</span>    pfn2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">"Catty"</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Person [name=Catty, age=16]</span>    <span class="token keyword">val</span> pfn3 <span class="token operator">=</span> Person<span class="token operator">::</span>getNameAndAge <span class="token comment" spellcheck="true">//KFunction3&lt;Person,String></span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">pfn3</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="属性引用"><a href="#属性引用" class="headerlink" title="属性引用"></a>属性引用</h3><p>通过反射调用属性需要KProperty实例。获得KProperty实例可以通过两种方式获得：一个是属性引用；另一个是通过KClass提供的API获得KProperty实例。<br>获得属性引用也可以使用 <code>::</code> 运算符：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">::</span>x<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">::</span>x<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//x</span><span class="token punctuation">}</span></code></pre><p>表达式 <code>::</code>x 求值为 KProperty<int> 类型的属性对象，它允许我们使用 get() 读取它的值，或者使用 name 属性来获取属性名。<br>&nbsp;<br>对于可变属性，例如 var y = 1，<code>::</code>y 返回 KMutableProperty<int> 类型的一个值， 该类型有一个 set() 方法。</int></int></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">::</span>y<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> kProperty <span class="token operator">=</span> <span class="token operator">::</span>counter <span class="token comment" spellcheck="true">//顶层属性的引用由KProperty0的实例表示，这里类型是KMutableProperty0&lt;Int></span>    kProperty<span class="token punctuation">.</span>setter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//通过KCallable的call方法</span>    kProperty<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>kProperty<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在KProperty实例上调用call方法会调用该属性的getter方法</span>    <span class="token function">println</span><span class="token punctuation">(</span>kProperty<span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>kProperty<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//</span><span class="token punctuation">}</span></code></pre><p>&nbsp;<br>属性引用可用于期望具有一个参数的函数：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> strs <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"bc"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> string <span class="token operator">-></span>    string<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>length <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//一个参数可以使用it替代</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>String<span class="token operator">::</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1, 2, 3]</span></code></pre><p>&nbsp;<br>访问属于类的成员的属性：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>full<span class="token punctuation">.</span>memberProperties<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">val</span> p<span class="token operator">:</span> Int<span class="token punctuation">)</span>    <span class="token keyword">val</span> a <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> prop <span class="token operator">=</span> A<span class="token operator">::</span>p <span class="token comment" spellcheck="true">//成员属性的引用由KProperty1的实例表示，这里类型是KProperty1&lt;A，Int></span>    <span class="token comment" spellcheck="true">//调用call方法会调用该属性的getter</span>    <span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1</span>    <span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1</span>    <span class="token comment" spellcheck="true">//更好获取属性值的方式：通过get方法</span>    <span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1</span>    <span class="token keyword">val</span> clz <span class="token operator">=</span> A<span class="token operator">::</span><span class="token keyword">class</span>    <span class="token comment" spellcheck="true">//通过KClass提供的API获得KProperty实例</span>    <span class="token keyword">val</span> prop1 <span class="token operator">=</span> clz<span class="token punctuation">.</span>memberProperties<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>prop1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1</span><span class="token punctuation">}</span></code></pre><p>&nbsp;<br>对于扩展属性：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> String<span class="token punctuation">.</span>lastChar<span class="token operator">:</span> Char    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>String<span class="token operator">::</span>lastChar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//c</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">.</span>lastChar<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//c</span><span class="token punctuation">}</span></code></pre><h3 id="与-Java-反射的互操作性"><a href="#与-Java-反射的互操作性" class="headerlink" title="与 Java 反射的互操作性"></a>与 Java 反射的互操作性</h3><p>在Java平台上，标准库包含反射类的扩展，它提供了与 Java 反射对象之间映射（参见 kotlin.reflect.jvm 包）<br>例如，为一个 Kotlin 属性获取一个 Java 的 getter/setter 方法或者幕后字段</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>javaField<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>javaGetter<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>javaSetter<span class="token keyword">class</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">var</span> p<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>A<span class="token operator">::</span>p<span class="token punctuation">.</span>javaGetter<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出 "public final int A.getP()"</span>    <span class="token function">println</span><span class="token punctuation">(</span>A<span class="token operator">::</span>p<span class="token punctuation">.</span>javaField<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 输出 "private final int A.p"</span>    <span class="token function">println</span><span class="token punctuation">(</span>A<span class="token operator">::</span>p<span class="token punctuation">.</span>javaSetter<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出 "public final void A.setP(int)"</span>    <span class="token function">println</span><span class="token punctuation">(</span>A<span class="token operator">::</span>p<span class="token punctuation">.</span>javaClass<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 输出 "class ReflectCompatKt$main$4"，类型是Class</span>    <span class="token comment" spellcheck="true">//要获得对应于 Java 类的 Kotlin 类，请使用 .kotlin 扩展属性</span>    <span class="token function">println</span><span class="token punctuation">(</span>A<span class="token operator">::</span>p<span class="token punctuation">.</span>javaClass<span class="token punctuation">.</span>kotlin<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 输出 "class ReflectCompatKt$main$5"，类型是KClass</span><span class="token punctuation">}</span></code></pre><h3 id="构造函数引用"><a href="#构造函数引用" class="headerlink" title="构造函数引用"></a>构造函数引用</h3><p>构造函数可以像方法和属性那样引用。它与该构造函数接受相同参数并且返回相应类型的对象。<br>通过使用 <code>::</code> 操作符并添加类名来引用构造函数。<br>示例1：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Foo<span class="token keyword">fun</span> <span class="token function">function</span><span class="token punctuation">(</span>factory<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Foo<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//factory:一个无参并返回 Foo 类型的函数参数</span>    <span class="token keyword">val</span> x<span class="token operator">:</span> Foo <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Foo@4617c264</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">function</span><span class="token punctuation">(</span><span class="token operator">::</span>Foo<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>示例2：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//扩展函数</span><span class="token keyword">fun</span> Person<span class="token punctuation">.</span><span class="token function">isAdult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token comment" spellcheck="true">//构造方法引用存储</span><span class="token keyword">val</span> createPerson <span class="token operator">=</span> <span class="token operator">::</span>Person<span class="token comment" spellcheck="true">/** * 尽管isAdult不是Person类的成员，还是可以通过引用访问它，这和访问实例的成员是一样的 */</span><span class="token keyword">val</span> predicate <span class="token operator">=</span> Person<span class="token operator">::</span>isAdult<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造方法引用 延迟执行创建类实例动作</span>    <span class="token keyword">val</span> p <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"TomCat"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Person(name=TomCat, age=22)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">predicate</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span><span class="token punctuation">}</span></code></pre><h2 id="绑定的函数与属性引用（自-1-1-起）"><a href="#绑定的函数与属性引用（自-1-1-起）" class="headerlink" title="绑定的函数与属性引用（自 1.1 起）"></a>绑定的函数与属性引用（自 1.1 起）</h2><p>通过对象<code>::</code>函数名（或属性名）把函数（或属性）的引用绑定在某个对象上，然后通过这个引用就能访问特定对象的函数或属性。</p><h3 id="引用特定对象的实例方法"><a href="#引用特定对象的实例方法" class="headerlink" title="引用特定对象的实例方法"></a>引用特定对象的实例方法</h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> numberRegex <span class="token operator">=</span> <span class="token string">"\\d+"</span><span class="token punctuation">.</span><span class="token function">toRegex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>numberRegex<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//val matches: (Regex, CharSequence) -> Boolean = Regex::matches</span>    <span class="token keyword">val</span> matches <span class="token operator">=</span> Regex<span class="token operator">::</span>matches <span class="token comment" spellcheck="true">//Regex的matches函数引用</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">matches</span><span class="token punctuation">(</span>numberRegex<span class="token punctuation">,</span> <span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//需要传入numberRegex对象参数</span>    <span class="token comment" spellcheck="true">//val isNumber: (CharSequence) -> Boolean = numberRegex::matches</span>    <span class="token keyword">val</span> isNumber <span class="token operator">=</span> numberRegex<span class="token operator">::</span>matches <span class="token comment" spellcheck="true">//把Regex的matches函数引用绑定到numberRegex对象上</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token string">"29"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//不需要传入numberRegex对象参数</span>    <span class="token comment" spellcheck="true">//绑定的引用可以用于任何只需要一个函数类型表达式的场景</span>    <span class="token keyword">val</span> strings <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"124"</span><span class="token punctuation">,</span> <span class="token string">"a70"</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>numberRegex<span class="token operator">::</span>matches<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[124]</span><span class="token punctuation">}</span></code></pre><h3 id="引用特定对象的属性"><a href="#引用特定对象的属性" class="headerlink" title="引用特定对象的属性"></a>引用特定对象的属性</h3><p>示例1：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> prop <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token operator">::</span>length    <span class="token function">println</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//3</span><span class="token punctuation">}</span></code></pre><p>示例2：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//构造方法引用存储</span><span class="token keyword">val</span> createPerson <span class="token operator">=</span> <span class="token operator">::</span>Person<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造方法引用 延迟执行创建类实例动作</span>    <span class="token keyword">val</span> p <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">"TomCat"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//绑定成员引用</span>    <span class="token keyword">val</span> dmitrysAgeFunction <span class="token operator">=</span> p<span class="token operator">::</span>age  <span class="token comment" spellcheck="true">//KProperty0&lt;Int></span>    <span class="token function">println</span><span class="token punctuation">(</span>dmitrysAgeFunction<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//get不需要接收者对象参数</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">dmitrysAgeFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//22</span>    <span class="token keyword">val</span> dmitrysAgeProperty <span class="token operator">=</span> Person<span class="token operator">::</span>age <span class="token comment" spellcheck="true">//KProperty1&lt;Person, Int></span>    <span class="token function">println</span><span class="token punctuation">(</span>dmitrysAgeProperty<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//22</span><span class="token punctuation">}</span></code></pre><h3 id="引用特定对象的构造函数"><a href="#引用特定对象的构造函数" class="headerlink" title="引用特定对象的构造函数"></a>引用特定对象的构造函数</h3><p>inner 类的构造函数的绑定的可调用引用可通过提供外部类的实例来获得：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Outer <span class="token punctuation">{</span>    <span class="token keyword">inner</span> <span class="token keyword">class</span> Inner    <span class="token keyword">class</span> Nest<span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建外部类实例</span>    <span class="token keyword">val</span> o <span class="token operator">=</span> <span class="token function">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> boundInnerCtor <span class="token operator">=</span> o<span class="token operator">::</span>Inner    <span class="token function">println</span><span class="token punctuation">(</span>boundInnerCtor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Outer$Inner@2626b418</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">boundInnerCtor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Outer$Inner@5a07e868</span>    <span class="token comment" spellcheck="true">//嵌套类构造方法的引用</span>    <span class="token keyword">val</span> nestCtor <span class="token operator">=</span> Outer<span class="token operator">::</span>Nest    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">nestCtor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Outer$Nest@2626b418</span><span class="token punctuation">}</span></code></pre><blockquote><p>参考：<a href="https://kotlinlang.org/docs/reference/reflection.html" target="_blank" rel="noopener">Kotlin Reflection</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 Kotlin 作用域函数</title>
      <link href="/2019/08/30/kotlin-zuo-yong-yu-han-shu-de-shi-yong/"/>
      <url>/2019/08/30/kotlin-zuo-yong-yu-han-shu-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="作用域函数"><a href="#作用域函数" class="headerlink" title="作用域函数"></a>作用域函数</h1><p>Kotlin 提供了一系列用来在【给定对象上下文】中执行代码块的函数。<br>当您在提供了lambda表达式的对象上调用此类函数时，它会形成一个临时范围。<br>在此范围内，您可以在不使用其名称的情况下访问该对象。<br>常用到的作用域函数有5个：<strong>let</strong>、<strong>run</strong>、<strong>with</strong>、<strong>apply</strong>、<strong>also</strong>。<br>基本上，这些函数都是在对象上执行代码块。不同之处在于这个对象在块内的可用性以及整个表达式返回的结果。<br>作用域函数不会引入任何新的功能，但它们可以使您的代码更简洁和可读。</p><h2 id="作用域函数的差异"><a href="#作用域函数的差异" class="headerlink" title="作用域函数的差异"></a>作用域函数的差异</h2><p>由于作用域函数本质上非常相似，因此理解它们之间的差异非常重要。<br>每个作用域函数有两个主要区别：</p><ul><li>引用上下文对象的方式</li><li>返回值</li></ul><h3 id="上下文对象"><a href="#上下文对象" class="headerlink" title="上下文对象"></a>上下文对象</h3><p>在作用域函数的lambda内部，上下文对象可通过简短引用而不是其实际变量名来获得。<br>每个作用域函数可使用以下两种方法访问上下文对象：<br>lambda接收者（this）或lambda参数（it）</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string">"Hello"</span>    <span class="token comment" spellcheck="true">// this</span>    str<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The receiver string length: <span class="token interpolation variable">$length</span>"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//println("The receiver string length: ${this.length}") // does the same</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// it</span>    str<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The receiver string's length is <span class="token interpolation"><span class="token delimiter variable">${</span>it<span class="token punctuation">.</span>length<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>run，with和apply将上下文对象引用为lambda接收者 - 通过关键字 <strong>this</strong> 。因此，在他们的lambdas中，对象就像在普通类函数中一样可用。<br>在大多数情况下，可以在访问接收者对象的成员时省略this，从而使代码更短。另一方面，如果省略this，则可能难以区分接收者成员和外部对象或函数。<br>因此，建议将上下文对象作为接收者（this）用于主要在对象成员上操作的lambda：调用其函数或赋值属性。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> adam <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"Adam"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>     age <span class="token operator">=</span> <span class="token number">20</span>                       <span class="token comment" spellcheck="true">// same as this.age = 20 or adam.age = 20</span>    city <span class="token operator">=</span> <span class="token string">"London"</span><span class="token punctuation">}</span></code></pre><h4 id="it"><a href="#it" class="headerlink" title="it"></a>it</h4><p>let，also将上下文对象作为lambda的参数。如果未指定参数名称，则通过隐式默认名称 <strong>it</strong> 访问该对象。<br>但是，在调用对象方法或属性时，您不能像 <strong>this</strong> 那样隐式地使用对象。<br>因此，当对象主要用作函数调用中的参数时，把上下文对象用作 <strong>it</strong> 更好。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getRandomInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>    <span class="token keyword">return</span> Random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>        <span class="token function">writeToLog</span><span class="token punctuation">(</span><span class="token string">"getRandomInt() generated value <span class="token interpolation variable">$it</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">val</span> i <span class="token operator">=</span> <span class="token function">getRandomInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>作用域函数因返回的结果而不同：</p><h4 id="上下文对象本身"><a href="#上下文对象本身" class="headerlink" title="上下文对象本身"></a>上下文对象本身</h4><p><strong>apply</strong>、<strong>also</strong>的返回值是 <strong>上下文对象本身</strong>。<br>因此，它们可以在调用链中用作辅助步骤：您可以继续在它们之后的同一对象上链式调用函数。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numberList <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>Double<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>numberList<span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Populating the list"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2.71</span><span class="token punctuation">)</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sorting the list"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>它们也可以在返回上下文对象的函数的return语句中使用。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getRandomInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>    <span class="token keyword">return</span> Random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>        <span class="token function">writeToLog</span><span class="token punctuation">(</span><span class="token string">"getRandomInt() generated value <span class="token interpolation variable">$it</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">val</span> i <span class="token operator">=</span> <span class="token function">getRandomInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="lambda结果"><a href="#lambda结果" class="headerlink" title="lambda结果"></a>lambda结果</h4><p><strong>let</strong>, <strong>run</strong>, <strong>with</strong> 返回的是 <strong>lambda结果</strong>。<br>因此，您可以在将结果赋值给变量，对结果进行链接操作等等。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span><span class="token keyword">val</span> countEndsWithE <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>     <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"four"</span><span class="token punctuation">)</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"five"</span><span class="token punctuation">)</span>    count <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"There are <span class="token interpolation variable">$countEndsWithE</span> elements that end with e."</span><span class="token punctuation">)</span></code></pre><p>此外，您可以忽略返回值并使用作用域函数为变量创建临时作用域。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span><span class="token function">with</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> firstItem <span class="token operator">=</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> lastItem <span class="token operator">=</span> <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"First item: <span class="token interpolation variable">$firstItem</span>, last item: <span class="token interpolation variable">$lastItem</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="作用域函数的选择"><a href="#作用域函数的选择" class="headerlink" title="作用域函数的选择"></a>作用域函数的选择</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p><strong>let</strong> 将上下文对象作为lambda的参数，返回值是 <strong>lambda结果</strong>。</p><ul><li><strong>let</strong> 可用于在调用链的 <strong>结果</strong> 上调用一个或多个函数。<br>  eg：<pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">,</span> <span class="token string">"five"</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> resultList <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>length <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">></span> <span class="token number">3</span> <span class="token punctuation">}</span>  <span class="token function">println</span><span class="token punctuation">(</span>resultList<span class="token punctuation">)</span></code></pre>  使用let函数重写：<pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">,</span> <span class="token string">"five"</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>length <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">></span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>   <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// and more function calls if needed</span>  <span class="token punctuation">}</span>   <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre></li><li><strong>let</strong> 通常仅用于非空值执行代码块。<br>要对非空对象执行操作，请使用安全调用操作符 <strong>?.</strong><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> str<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string">"Hello"</span>     <span class="token comment" spellcheck="true">//processNonNullString(str)       // compilation error: str can be null</span>  <span class="token keyword">val</span> length <span class="token operator">=</span> str<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>       <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"let() called on <span class="token interpolation variable">$it</span>"</span><span class="token punctuation">)</span>              <span class="token function">processNonNullString</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// OK: 'it' is not null inside '?.let { }'</span>      it<span class="token punctuation">.</span>length  <span class="token punctuation">}</span></code></pre></li><li>使用<strong>let</strong> 的另一种情况是引入作用域范围有限的局部变量，以提高代码可读性。<br>为上下文对象定义一个新的变量名：<pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> modifiedFirstItem <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> firstItem <span class="token operator">-></span>          <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The first item of the list is '<span class="token interpolation variable">$firstItem</span>'"</span><span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>firstItem<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span> firstItem <span class="token keyword">else</span> <span class="token string">"!"</span> <span class="token operator">+</span> firstItem <span class="token operator">+</span> <span class="token string">"!"</span>  <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"First item after modifications: '<span class="token interpolation variable">$modifiedFirstItem</span>'"</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p>非扩展函数：上下文对象作为参数传递，但在lambda中，它可用作接收者（this）。返回值是 <strong>lambda结果</strong>。</p><ul><li><p>建议使用 <strong>with</strong> 来调用上下文对象上的函数，而不提供lambda结果。<br>在代码中，<strong>with</strong> 可以读作“使用此对象，执行以下操作”。</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span>  <span class="token function">with</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"'with' is called with argument <span class="token interpolation variable">$this</span>"</span><span class="token punctuation">)</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It contains <span class="token interpolation variable">$size</span> elements"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre></li><li><p>with的另一个用途是引入一个辅助对象，其属性或函数将用于计算值。</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> firstAndLast <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token string">"The first element is <span class="token interpolation"><span class="token delimiter variable">${</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>,"</span> <span class="token operator">+</span>          <span class="token string">" the last element is <span class="token interpolation"><span class="token delimiter variable">${</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span>  <span class="token punctuation">}</span>  <span class="token function">println</span><span class="token punctuation">(</span>firstAndLast<span class="token punctuation">)</span></code></pre></li></ul><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p>上下文对象可用作接收者（this）。返回值是 <strong>lambda结果</strong>。<br><strong>run</strong> 执行与 <strong>with</strong> 相同的操作，但是调用 <strong>let</strong> - 作为上下文对象的扩展函数。</p><ul><li><p>当lambda包含对象初始化和返回值的计算时，<strong>run</strong> 非常有用。</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> service <span class="token operator">=</span> <span class="token function">MultiportService</span><span class="token punctuation">(</span><span class="token string">"https://example.kotlinlang.org"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> result <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>      port <span class="token operator">=</span> <span class="token number">8080</span>      <span class="token function">query</span><span class="token punctuation">(</span><span class="token function">prepareRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" to port <span class="token interpolation variable">$port</span>"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// the same code written with let() function:</span>  <span class="token keyword">val</span> letResult <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>      it<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">8080</span>      it<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">prepareRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" to port <span class="token interpolation"><span class="token delimiter variable">${</span>it<span class="token punctuation">.</span>port<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre></li><li><p>除了在接收者对象上调用run之外，您还可以将其用作 <strong>非扩展函数</strong>。非扩展 <strong>run</strong> 允许您在需要表达式的地方执行由多个语句组成的块。</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> hexNumberRegex <span class="token operator">=</span> run <span class="token punctuation">{</span>      <span class="token keyword">val</span> digits <span class="token operator">=</span> <span class="token string">"0-9"</span>      <span class="token keyword">val</span> hexDigits <span class="token operator">=</span> <span class="token string">"A-Fa-f"</span>      <span class="token keyword">val</span> sign <span class="token operator">=</span> <span class="token string">"+-"</span>      <span class="token function">Regex</span><span class="token punctuation">(</span><span class="token string">"[<span class="token interpolation variable">$sign</span>]?[<span class="token interpolation variable">$digits</span><span class="token interpolation variable">$hexDigits</span>]+"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>match <span class="token keyword">in</span> hexNumberRegex<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token string">"+1234 -FFFF not-a-number"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">println</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre></li></ul><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>上下文对象可用作接收者（this）。返回值是<strong>对象本身</strong>。</p><ul><li>对于不返回值的代码块使用 <strong>apply</strong>，并且主要对接收器对象的成员进行操作。<br>  <strong>apply</strong> 用于对象的配置。这样的调用可以理解为“将以下赋值应用于对象”。<pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> adam <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"Adam"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>      age <span class="token operator">=</span> <span class="token number">32</span>      city <span class="token operator">=</span> <span class="token string">"London"</span>          <span class="token punctuation">}</span></code></pre>  将接收者作为返回值，您可以轻松地将 <strong>apply</strong> 包含到调用链中，以便进行更复杂的处理。</li></ul><h3 id="also"><a href="#also" class="headerlink" title="also"></a>also</h3><p>上下文对象可用作参数（it）。返回值是<strong>对象本身</strong>。</p><p><strong>also</strong> 适用于执行将上下文对象作为参数的某些操作。<br>对于不更改对象的附加操作，如日志记录或打印调试信息，请使用 <strong>also</strong>。<br>通常，您可以在不破坏程序逻辑的情况下从调用链中删除 <strong>also</strong> 的调用。</p><p>当您在代码中看到 <strong>also</strong> 时，您可以将其读作“并执行以下操作”。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span>numbers    <span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The list elements before adding new one: <span class="token interpolation variable">$it</span>"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"four"</span><span class="token punctuation">)</span></code></pre><h3 id="作用域函数主要差异表"><a href="#作用域函数主要差异表" class="headerlink" title="作用域函数主要差异表"></a>作用域函数主要差异表</h3><table><thead><tr><th>作用域函数</th><th>对象引用</th><th>返回值</th><th>是扩展函数</th></tr></thead><tbody><tr><td>let</td><td>it</td><td>lambda结果</td><td>是</td></tr><tr><td>run</td><td>this</td><td>lambda结果</td><td>是</td></tr><tr><td>run</td><td>-</td><td>lambda结果</td><td>否：没有上下文对象调用</td></tr><tr><td>with</td><td>this</td><td>lambda结果</td><td>否：将上下文对象作为参数。</td></tr><tr><td>apply</td><td>this</td><td>上下文对象</td><td>是</td></tr><tr><td>also</td><td>it</td><td>上下文对象</td><td>是</td></tr></tbody></table><p>以下是根据预期用途选择作用域函数的简要指南:</p><ul><li>在非空对象上执行lambda：<strong>let</strong></li><li>将表达式作为局部作用域中的变量引入：<strong>let</strong></li><li>对象配置：<strong>apply</strong></li><li>对象配置和计算结果：<strong>run</strong></li><li>在需要表达式的地方运行语句:非扩展 <strong>run</strong></li><li>附加效果: <strong>also</strong></li><li>在对象上对函数进行分组调用：<strong>with</strong></li></ul><p>虽然作用域函数是使代码更简洁的一种方法，但是要避免过度使用它们：它会降低代码的可读性并导致错误。<br>避免嵌套作用域函数，并在链接它们时要小心：很容易混淆当前上下文对象 和 <strong>this</strong> / <strong>it</strong> 的值。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> 作用域函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin与Java混合编程</title>
      <link href="/2019/08/29/kotlin-yu-java-hun-he-bian-cheng/"/>
      <url>/2019/08/29/kotlin-yu-java-hun-he-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Kotlin与Java-混合编程"><a href="#Kotlin与Java-混合编程" class="headerlink" title="Kotlin与Java 混合编程"></a>Kotlin与Java 混合编程</h1><h2 id="Kotlin与Java的类型映射"><a href="#Kotlin与Java的类型映射" class="headerlink" title="Kotlin与Java的类型映射"></a>Kotlin与Java的类型映射</h2><h3 id="Kotlin-对-Java基本数据类型的映射"><a href="#Kotlin-对-Java基本数据类型的映射" class="headerlink" title="Kotlin 对 Java基本数据类型的映射"></a>Kotlin 对 Java基本数据类型的映射</h3><p>Kotlin 特殊处理一部分 Java 类型。这样的类型不是“按原样”从 Java 加载，而是 映射 到相应的 Kotlin 类型。 映射只发生在编译期间，运行时表示保持不变。<br>Java 的原生类型映射到相应的 Kotlin 类型：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181726.png" alt></p><h3 id="Kotlin-对-Java-包装类型的映射"><a href="#Kotlin-对-Java-包装类型的映射" class="headerlink" title="Kotlin 对 Java 包装类型的映射"></a>Kotlin 对 Java 包装类型的映射</h3><p>Java包装类是对Java基本数据类型的包装，Java包装类可以有空值，所以映射到Kotlin数据类型时是可空类型。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181211.png" alt></p><h3 id="Kotlin-对-Java-常用类型的映射"><a href="#Kotlin-对-Java-常用类型的映射" class="headerlink" title="Kotlin 对 Java 常用类型的映射"></a>Kotlin 对 Java 常用类型的映射</h3><p>Java 声明的类型在 Kotlin 中会被特别对待并称为”平台类型”。Kotlin语法中并没有平台类型的表示方式，但是在IntelliJ IDEA等IDE工具或一些文档中采用“数据类型!”方式表示。<br>比如String!表示法被Kotlin编译器用来表示来自Java代码的平台类型。你不能在自己的代码中使用这样的语法。而且感叹号只是强调类型的可空性是未知的。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181235.png" alt><br>&nbsp;<br>Java常用类是位于java.lang中一些核心类，它们映射到Kotlin数据类型时是非空或可空类型。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181245.png" alt></p><h3 id="Kotlin-对-Java-集合类型的映射"><a href="#Kotlin-对-Java-集合类型的映射" class="headerlink" title="Kotlin 对 Java 集合类型的映射"></a>Kotlin 对 Java 集合类型的映射</h3><p>Java集合类型是映射到Kotlin数据类型如下表所示。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181255.png" alt><br>从表中可见Java集合不区分只读和可变类型，而Kotlin中有这样的区别。<br>在表中还有一种平台类型，在混合编程时Kotlin将它们看作可空或非空类型。<br>例如：<br>平台类型(Mutable)Iterator<t>!表示的是Iterator<t>、Iterator<t>?、MutableIterator<t>和MutableIterator<t>?四种可能性。<br>(Mutable)Collection<t>! 表示“可变或不可变、可空或不可空的 T 的 Java 集合”。<br>示例：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181305.png" alt><br>&nbsp;<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181314.png" alt></t></t></t></t></t></t></p><h3 id="Kotlin-对-Java-数组的映射"><a href="#Kotlin-对-Java-数组的映射" class="headerlink" title="Kotlin 对 Java 数组的映射"></a>Kotlin 对 Java 数组的映射</h3><p>与 Java 不同，Kotlin 中的数组是不型变的。<br>这意味着 Kotlin 不允许我们把一个 Array<string> 赋值给一个 Array<any>， 从而避免了可能的运行时故障。<br>Kotlin 也禁止我们把一个子类的数组当做超类的数组传递给 Kotlin 的方法，<br>但是对于 Java，这是允许的（通过 Array&lt;(out) String&gt;! 这种形式的平台类型）。<br>&nbsp;<br>在Java 平台上，数组会使用原生数据类型以避免装箱/拆箱操作的开销。<br>由于 Kotlin 隐藏了这些实现细节，因此需要一个变通方法来与 Java 代码进行交互。<br>对于每种原生类型的数组都有一个特化的类（IntArray、 DoubleArray、 CharArray 等等）来处理这种情况。<br>它们与 Array 类无关，并且会编译成 Java 原生类型数组以获得最佳性能。<br>&nbsp;<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181323.png" alt><br>Array&lt;(out) T&gt;! 表示“可空或者不可空的 T（或 T 的子类型）的 Java 数组”。<br>例子：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181333.png" alt><br>&nbsp;<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181343.png" alt></any></string></p><h3 id="Kotlin-对-Java-泛型的映射"><a href="#Kotlin-对-Java-泛型的映射" class="headerlink" title="Kotlin 对 Java 泛型的映射"></a>Kotlin 对 Java 泛型的映射</h3><p>当带有泛型参数的 Java 类型导入 Kotlin 时，会执行一些转换：</p><ul><li>Java 的通配符转换成类型投影<ul><li>Foo&lt;? extends Bar&gt; 转换成 Foo&lt;out Bar!&gt;!，</li><li>Foo&lt;? super Bar&gt; 转换成 Foo&lt;in Bar!&gt;!；</li></ul></li><li>Java的原始类型转换成星投影<ul><li>List 转换成 List&lt;*&gt;!，即 List&lt;out Any?&gt;!</li></ul></li></ul><p>&nbsp;<br>和 Java 一样，Kotlin 在运行时不保留泛型，即对象不携带传递到他们构造器中的那些类型参数的实际类型。<br>例如 ArrayList<integer>() 和 ArrayList<character>() 是不能区分的。<br>这使得执行 is-检测不可能照顾到泛型。 Kotlin 只允许 is-检测星投影的泛型类型：</character></integer></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">is</span> List<span class="token operator">&lt;</span>Int<span class="token operator">></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 错误：无法检查它是否真的是一个 Int 列表</span><span class="token comment" spellcheck="true">// but</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">is</span> List<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// OK：不保证列表的内容</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181351.png" alt> </p><h2 id="在Kotlin中调用Java"><a href="#在Kotlin中调用Java" class="headerlink" title="在Kotlin中调用Java"></a>在Kotlin中调用Java</h2><h3 id="避免Kotlin关键字"><a href="#避免Kotlin关键字" class="headerlink" title="避免Kotlin关键字"></a>避免Kotlin关键字</h3><p>在Java代码中给标识符命名时可能没有考虑到哪些Kotlin的关键字。<br>但当在Kotlin中调用这样的Java代码时，则需要将这些关键字用反引号括起来。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJavaClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> MyJavaClass object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyJavaClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"MyJavaClass{}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> obj <span class="token operator">=</span> MyJavaClass<span class="token punctuation">.</span>`<span class="token keyword">object</span>` <span class="token comment" spellcheck="true">//避免Kotlin关键字object</span>    <span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="异常检查"><a href="#异常检查" class="headerlink" title="异常检查"></a>异常检查</h3><p>Kotlin和Java在异常检查上有很大的不同，Java有受检查异常，而Kotlin中没有受检查异常。<br>那么当Kotlin调用Java中的一个函数时，这个函数声明抛出异常时，在Kotlin中不用必须捕获。<br>Java代码需要捕获异常：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Kotlin代码不需要捕获异常：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> br <span class="token operator">=</span> <span class="token function">BufferedReader</span><span class="token punctuation">(</span><span class="token function">FileReader</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="调用Java函数式接口"><a href="#调用Java函数式接口" class="headerlink" title="调用Java函数式接口"></a>调用Java函数式接口</h3><p>在Java函数式接口是只有一个抽象函数的接口，也简称SAM（Single Abstract Method缩写）。<br>在Kotlin中调用Java函数式接口非常的简洁，形式是“接口名{…}”。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//可计算接口</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Calculable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算两个int数值</span>    <span class="token keyword">int</span> <span class="token function">calculateInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">val</span> n2 <span class="token operator">=</span> <span class="token number">5</span><span class="token comment" spellcheck="true">// 实现加法计算Calculable对象</span><span class="token keyword">val</span> f1 <span class="token operator">=</span> Calculable <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token operator">-></span> a <span class="token operator">+</span> b <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现减法计算Calculable对象</span><span class="token keyword">val</span> f2 <span class="token operator">=</span> Calculable <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token operator">-></span> a <span class="token operator">-</span> b <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用calculateInt函数进行加法计算</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$n1</span> + <span class="token interpolation variable">$n2</span> = <span class="token interpolation"><span class="token delimiter variable">${</span>f1<span class="token punctuation">.</span><span class="token function">calculateInt</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 调用calculateInt函数进行减法计算</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$n1</span> - <span class="token interpolation variable">$n2</span> = <span class="token interpolation"><span class="token delimiter variable">${</span>f2<span class="token punctuation">.</span><span class="token function">calculateInt</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span></code></pre><h3 id="Java可变参数"><a href="#Java可变参数" class="headerlink" title="Java可变参数"></a>Java可变参数</h3><p>Java 类中声明一个具有可变数量参数（varargs）的方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaArrayExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeIndicesVarArg</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> indices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//TODO</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在Kotlin中，需要使用展开运算符 <strong>*</strong> 来传递 <strong>IntArray</strong></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> javaObj <span class="token operator">=</span> <span class="token function">JavaArrayExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> array <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>javaObj<span class="token punctuation">.</span><span class="token function">removeIndicesVarArg</span><span class="token punctuation">(</span><span class="token operator">*</span>array<span class="token punctuation">)</span></code></pre><p>目前Kotlin无法传递 null 给一个声明为可变参数的方法。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181400.png" alt></p><blockquote><p>详细参考：<a href="https://www.kotlincn.net/docs/reference/java-interop.html" target="_blank" rel="noopener">Kotlin 中调用 Java</a></p></blockquote><h2 id="Java调用Kotlin"><a href="#Java调用Kotlin" class="headerlink" title="Java调用Kotlin"></a>Java调用Kotlin</h2><h3 id="访问Kotlin属性"><a href="#访问Kotlin属性" class="headerlink" title="访问Kotlin属性"></a>访问Kotlin属性</h3><p>Kotlin一个属性对应Java中一个私有字段、一个setter函数和一个getter函数。(如果是只读属性的则没有setter函数。)<br>那么Java访问Kotlin的属性这是通过这些getter函数和setter函数。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * var声明的属性会生成setter和getter函数，如果是val声明的属性是只读的，只生成getter函数。 */</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">var</span> password<span class="token operator">:</span> String<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java">User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Tom</span>user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"54321"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//54321</span></code></pre><h3 id="访问包级别成员"><a href="#访问包级别成员" class="headerlink" title="访问包级别成员"></a>访问包级别成员</h3><p>在同一个Kotlin文件中，那些顶层属性和函数，包括顶层扩展属性和函数都不属于某个类，但它们属于该Kotlin文件中定义的包。<br>在Java中访问它们时，把它们当成静态成员。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@file:JvmName</span><span class="token punctuation">(</span><span class="token string">"PackageLevel"</span><span class="token punctuation">)</span><span class="token keyword">package</span> level<span class="token comment" spellcheck="true">//顶层属性</span><span class="token keyword">val</span> area <span class="token operator">=</span> <span class="token number">100.0</span><span class="token comment" spellcheck="true">//顶层函数</span><span class="token keyword">fun</span> <span class="token function">rectangleArea</span><span class="token punctuation">(</span>width<span class="token operator">:</span> Double<span class="token punctuation">,</span> height<span class="token operator">:</span> Double<span class="token punctuation">)</span><span class="token operator">:</span> Double <span class="token punctuation">{</span>    <span class="token keyword">val</span> area <span class="token operator">=</span> width <span class="token operator">*</span> height    <span class="token keyword">return</span> area<span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//访问顶层函数</span>Double area <span class="token operator">=</span> PackageLevel<span class="token punctuation">.</span><span class="token function">rectangleArea</span><span class="token punctuation">(</span><span class="token number">320.0</span><span class="token punctuation">,</span> <span class="token number">480.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问顶层属性</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>PackageLevel<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="实例字段、静态字段和静态函数"><a href="#实例字段、静态字段和静态函数" class="headerlink" title="实例字段、静态字段和静态函数"></a>实例字段、静态字段和静态函数</h3><p>Java语言中所有的变量和函数都封装到一个类中，类中包括实例函数、实例字段、静态字段和静态函数。<br>Java实例函数就是Kotlin类中声明的函数，而Java中的实例字段、静态字段和静态函数，Kotlin也是支持的。</p><h4 id="实例字段"><a href="#实例字段" class="headerlink" title="实例字段"></a>实例字段</h4><p>如果需要以Java实例字段形式（即：实例名.字段名）访问Kotlin中的属性，则需要在该属性前加@JvmField注解，表明该属性被当做Java中的字段使用，可见性相同。<br>&nbsp;<br>如果一个属性有幕后字段（backing field）、非私有、没有 open /override 或者 const 修饰符并且不是被委托的属性，那么你可以用 @JvmField 注解该属性。<br>&nbsp;<br>另外，延迟初始化（lateinit）属性在Java中当做字段使用，可见性相同。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Person <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 名字</span>    <span class="token annotation builtin">@JvmField</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Tony"</span>    <span class="token comment" spellcheck="true">// 年龄</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token comment" spellcheck="true">// 出生日期</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> birthDate<span class="token operator">:</span> Date<span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">kt<span class="token punctuation">.</span>Person p<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">kt<span class="token punctuation">.</span>Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Tony</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 'age' has private access in 'kt.Person'</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>birthDate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//null</span></code></pre><h4 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h4><p>如果需要以Java静态字段形式（即：类名.字段名）访问Kotlin中的属性，可以有两种实现方式：</p><ul><li>属性声明为顶层属性，Java中将所有的顶层成员（属性和函数）都认为是静态的。</li><li>在Kotlin的声明对象和伴生对象中定义属性，这些属性需要使用@JvmField注解、lateinit或const来修饰</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@file:JvmName</span><span class="token punctuation">(</span><span class="token string">"StaticField"</span><span class="token punctuation">)</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">object</span> Singleton <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//Singleton声明对象</span><span class="token annotation builtin">@JvmField</span>    <span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">//@JvmField注解Singleton对象中x属性</span><span class="token keyword">lateinit</span> <span class="token keyword">var</span> birthDate<span class="token operator">:</span> Date <span class="token comment" spellcheck="true">//声明延迟属性birthDate</span><span class="token punctuation">}</span><span class="token keyword">class</span> Account <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//Account伴生对象</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//声明伴生对象中interestRate属性是const常量类型</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> interestRate <span class="token operator">=</span> <span class="token number">0.018</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明顶层常量MAX_COUNT</span><span class="token keyword">const</span> <span class="token keyword">val</span> MAX_COUNT <span class="token operator">=</span> <span class="token number">500</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//访问静态字段</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span>Singleton<span class="token punctuation">.</span>birthDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span>interestRate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0.018</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>StaticField<span class="token punctuation">.</span>MAX_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//500</span></code></pre><h4 id="静态函数"><a href="#静态函数" class="headerlink" title="静态函数"></a>静态函数</h4><p>如果需要以Java静态函数形式（即：类名.函数名）访问Kotlin中的函数，可以有两种实现方式：</p><ul><li>函数声明为顶层函数</li><li>在Kotlin的声明对象和伴生对象中定义函数，这些函数需要使用@JvmStatic来修饰。</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@file:JvmName</span><span class="token punctuation">(</span><span class="token string">"StaticField"</span><span class="token punctuation">)</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">object</span> Singleton <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//Singleton声明对象</span>    <span class="token annotation builtin">@JvmField</span><span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">//@JvmField注解Singleton对象中x属性</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> birthDate<span class="token operator">:</span> Date <span class="token comment" spellcheck="true">//声明延迟属性birthDate</span>    <span class="token comment" spellcheck="true">//@JvmStatic注解Singleton对象中displayX函数</span>    <span class="token annotation builtin">@JvmStatic</span>    <span class="token keyword">fun</span> <span class="token function">displayX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> Account <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//Account伴生对象</span><span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//声明伴生对象中interestRate属性是const常量类型</span>        <span class="token keyword">const</span> <span class="token keyword">val</span> interestRate <span class="token operator">=</span> <span class="token number">0.018</span>        <span class="token comment" spellcheck="true">//JvmStatic注解伴生对象中interestBy函数</span>        <span class="token annotation builtin">@JvmStatic</span>        <span class="token keyword">fun</span> <span class="token function">interestBy</span><span class="token punctuation">(</span>amt<span class="token operator">:</span> Double<span class="token punctuation">)</span><span class="token operator">:</span> Double <span class="token punctuation">{</span>            <span class="token keyword">return</span> interestRate <span class="token operator">*</span> amt    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//声明顶层常量MAX_COUNT</span><span class="token keyword">const</span> <span class="token keyword">val</span> MAX_COUNT <span class="token operator">=</span> <span class="token number">500</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//访问静态字段</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//10</span>Singleton<span class="token punctuation">.</span>birthDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span>interestRate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0.018</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>StaticField<span class="token punctuation">.</span>MAX_COUNT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//500</span><span class="token comment" spellcheck="true">//访问静态函数</span>Singleton<span class="token punctuation">.</span><span class="token function">displayX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Account<span class="token punctuation">.</span><span class="token function">interestBy</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>&nbsp;<br>从Kotlin 1.3开始，@JvmStatic也适用于接口的伴随对象中定义的函数。<br>这些函数编译为接口中的静态方法。请注意，接口中的静态方法是在Java 1.8中引入的。</p><pre class=" language-java"><code class="language-java">kt<span class="token punctuation">.</span>ChatBot<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ChatBot<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ChatBot</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Java 1.8 接口里可以声明静态方法，并且可以实现。</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">package</span> kt<span class="token keyword">interface</span> ChatBot <span class="token punctuation">{</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token annotation builtin">@JvmStatic</span> <span class="token keyword">fun</span> <span class="token function">greet</span><span class="token punctuation">(</span>username<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, <span class="token interpolation variable">$username</span>"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>在Java中可见性有：private、protected、default（包私有）和 public。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181409.png" alt><br>&nbsp;<br>在 Kotlin 中有这四个可见性修饰符：private、 protected、 internal（内部可见） 和 public。<br>如果没有显式指定修饰符的话，默认可见性是 public。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181419.png" alt><br>Java和Kotlin都有4种可见性，但Kotlin中没有默认包私有可见性，而Java中没有内部可见性。<br>Java和Kotlin除了public完全兼容外，其他的可见性都是有所区别的。详细解释说明如下：</p><h4 id="Kotlin私有可见性"><a href="#Kotlin私有可见性" class="headerlink" title="Kotlin私有可见性"></a>Kotlin私有可见性</h4><p>由于Kotlin私有可见性可以声明类，类中成员，也可以声明顶层成员。<br>那么映射到Java分为三种情况：</p><ul><li>Kotlin类中私有成员映射到Java类中私有实例成员。 </li><li>Kotlin中私有顶层成员映射到Java中私有静态成员。</li><li>Kotlin中声明的私有类映射到Java中的包私有类。<pre class=" language-kotlin"><code class="language-kotlin">   <span class="token keyword">private</span> <span class="token keyword">class</span> Person2 <span class="token punctuation">{</span>       <span class="token keyword">val</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"Jack"</span>   <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Person2 person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Jack</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre>  <img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181428.png" alt></li></ul><h4 id="Kotlin内部可见性"><a href="#Kotlin内部可见性" class="headerlink" title="Kotlin内部可见性"></a>Kotlin内部可见性</h4><p>由于Java中没有内部可见性，那么在相同的模块下，Kotlin内部可见性映射为Java公有可见性。但不同模块下无法访问。<br>&nbsp;<br>Java代码访问Kotlin代码：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181436.png" alt><br>Kotlin代码访问Kotlin代码：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181445.png" alt></p><h4 id="Kotlin保护可见性"><a href="#Kotlin保护可见性" class="headerlink" title="Kotlin保护可见性"></a>Kotlin保护可见性</h4><p>Kotlin保护可见性映射为Java保护可见性。</p><h4 id="Kotlin公有可见性"><a href="#Kotlin公有可见性" class="headerlink" title="Kotlin公有可见性"></a>Kotlin公有可见性</h4><p>Kotlin公有可见性映射为Java公有可见性。<br>Kotin类声明：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">package</span> kt<span class="token punctuation">.</span>bean<span class="token comment" spellcheck="true">// 员工类</span><span class="token keyword">internal</span> <span class="token keyword">class</span> Employee <span class="token punctuation">{</span>    <span class="token keyword">internal</span> <span class="token keyword">var</span> no<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span>          <span class="token comment" spellcheck="true">// 内部可见性Java端可见</span>    <span class="token keyword">protected</span> <span class="token keyword">var</span> job<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>   <span class="token comment" spellcheck="true">// 保护可见性Java端子类继承可见</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> salary<span class="token operator">:</span> Double <span class="token operator">=</span> <span class="token number">0.0</span>    <span class="token comment" spellcheck="true">// 私有可见性Java端不可见</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">>=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> field <span class="token operator">=</span> value        <span class="token punctuation">}</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> dept<span class="token operator">:</span> Department     <span class="token comment" spellcheck="true">// 公有可见性Java端可见</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 部门类，open可以被继承</span><span class="token keyword">open</span> <span class="token keyword">class</span> Department <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">var</span> no<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">// 保护可见性Java端子类继承可见</span>    <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span>     <span class="token comment" spellcheck="true">// 公有可见性Java端可见</span><span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">const</span> <span class="token keyword">val</span> MAX_COUNTS <span class="token operator">=</span> <span class="token number">500</span>  <span class="token comment" spellcheck="true">// 内部可见性Java端可见</span><span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> MIN_COUNTS <span class="token operator">=</span> <span class="token number">0</span>     <span class="token comment" spellcheck="true">// 私有可见性Java端不可见</span></code></pre><p>Java代码访问：</p><pre class=" language-java"><code class="language-java">Employee emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问Kotlin中内部可见性的Employee成员属性no</span><span class="token keyword">int</span> no <span class="token operator">=</span> emp<span class="token punctuation">.</span>getNo$<span class="token function">share_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//虽然能编译通过，运行时报错：“java:找不到符号”</span>Department dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问Kotlin中公有可见性的Department成员属性name</span>dept<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"市场部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问Kotlin中公有可见性的Employee中成员属性dept</span>emp<span class="token punctuation">.</span><span class="token function">setDept</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span><span class="token function">getDept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//访问Kotlin中内部可见性的顶层属性MAX_COUNTS</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>EmployeeKt<span class="token punctuation">.</span>MAX_COUNTS<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：Kotlin中内部可见性类成员，会生成比较复杂的函数名字，在IDE工具中这个函数语法存在，但是编译是无法通过。<br>这源自于Kotlin内部可见性与Java可见性的兼容问题，事实上在目前的Kotlin这个版本上Java不能访问Kotlin内部可见性类成员，但可以访问内部可见性的类和内部可见性是顶层成员。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181454.png" alt></p><h3 id="生成重载函数"><a href="#生成重载函数" class="headerlink" title="生成重载函数"></a>生成重载函数</h3><p>Kotlin的函数参数可以设置默认值，看起来像多个函数重载一样。但Java中并不支持参数默认值，只能支持全部参数函数。<br>为了解决这个问题可以在Kotlin函数前使用@JvmOverloads注解，Kotlin编译器会生成多个重载函数。<br>@JvmOverloads注解的函数可以是：构造函数、成员函数和顶层函数，但不能是抽象函数。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">package</span> over<span class="token punctuation">.</span>load<span class="token keyword">class</span> Animal <span class="token annotation builtin">@JvmOverloads</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>    <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">,</span>    <span class="token keyword">val</span> sex<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">class</span> DisplayOverloading <span class="token punctuation">{</span>    <span class="token annotation builtin">@JvmOverloads</span>    <span class="token keyword">fun</span> <span class="token function">display</span><span class="token punctuation">(</span>c<span class="token operator">:</span> Char<span class="token punctuation">,</span> num<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> num<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation builtin">@JvmOverloads</span><span class="token keyword">fun</span> <span class="token function">makeCoffee</span><span class="token punctuation">(</span>type<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"卡布奇诺"</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"制作一杯<span class="token interpolation"><span class="token delimiter variable">${</span>type<span class="token delimiter variable">}</span></span>咖啡。"</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Animal构造函数添加@JvmOverloads注解，它会生成两个Java重载构造函数</span>Animal animal1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Animal animal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DisplayOverloading dis1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DisplayOverloading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//DisplayOverloading声明了成员函数，它有默认参数，函数前也添加@JvmOverloads注解，它会生成两个Java重载函数</span>dis1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dis1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JvmOverloadsKt声明了顶层函数，它也有默认参数，函数前也添加@JvmOverloads注解。它会生成两个Java静态重载函数</span>JvmOverloadsKt<span class="token punctuation">.</span><span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JvmOverloadsKt<span class="token punctuation">.</span><span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token string">"摩卡咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="异常检查-1"><a href="#异常检查-1" class="headerlink" title="异常检查"></a>异常检查</h3><p>Kotlin中没有受检查异常，在函数后面也不会有抛出异常声明</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">package</span> exception<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token operator">*</span><span class="token comment" spellcheck="true">// 解析日期</span><span class="token keyword">fun</span> <span class="token function">readDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Date<span class="token operator">?</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string">"201A-18-18"</span> <span class="token comment" spellcheck="true">//非法格式日期</span>    <span class="token keyword">val</span> df <span class="token operator">=</span> <span class="token function">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 从字符串中解析日期</span>    <span class="token keyword">return</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>Java代码中声明的readDate()函数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">readDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>    String str <span class="token operator">=</span> <span class="token string">"201A-18-18"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//非法格式日期</span>    SimpleDateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从字符串中解析日期</span>    <span class="token keyword">return</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//抛出ParseException异常，这是因为解析的字符串不是一个合法的日期</span><span class="token punctuation">}</span></code></pre><p>在Java代码中分别调用readDate()</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*  在Java中ParseException是受检查异常，  如果在Java中调用Kotlin代码中的readDate函数，由于readDate函数没有声明抛出ParseException异常，  编译器不会检查要求Java程序捕获异常处理。 */</span>ExceptionDemoKt<span class="token punctuation">.</span><span class="token function">readDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*  调用Java代码中的readDate函数，需要捕获异常 */</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    MyException<span class="token punctuation">.</span><span class="token function">readDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在Java代码中，Kotlin这种处理异常的行为不符合Java的习惯，也不安全。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829181503.png" alt></p><p>为此可以在Kotlin的函数前加上@Throws注解，修改Kotlin代码如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//在readDate函数前添加注解@Throws(ParseException::class)，其中ParseException需要处理的异常类</span><span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>ParseException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">fun</span> <span class="token function">readDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Date<span class="token operator">?</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> str <span class="token operator">=</span> <span class="token string">"201A-18-18"</span> <span class="token comment" spellcheck="true">//非法格式日期</span>    <span class="token keyword">val</span> df <span class="token operator">=</span> <span class="token function">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 从字符串中解析日期</span>    <span class="token keyword">return</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    ExceptionDemoKt<span class="token punctuation">.</span><span class="token function">readDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>详细参考：<a href="https://www.kotlincn.net/docs/reference/java-to-kotlin-interop.html" target="_blank" rel="noopener">Java 中调用 Kotlin</a></p></blockquote><h2 id="Kotlin与Java的简单实例对比"><a href="#Kotlin与Java的简单实例对比" class="headerlink" title="Kotlin与Java的简单实例对比"></a>Kotlin与Java的简单实例对比</h2><h3 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551256658495.png" alt></p><h3 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551256755198.png" alt></p><h3 id="null声明"><a href="#null声明" class="headerlink" title="null声明"></a>null声明</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551256852127.png" alt></p><h3 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551256870871.png" alt></p><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551256934360.png" alt></p><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551256970261.png" alt></p><h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551257045871.png" alt></p><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551257049976.png" alt></p><h3 id="类型判断和转换（显式）"><a href="#类型判断和转换（显式）" class="headerlink" title="类型判断和转换（显式）"></a>类型判断和转换（显式）</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551257054047.png" alt></p><h3 id="类型判断和转换（隐式）"><a href="#类型判断和转换（隐式）" class="headerlink" title="类型判断和转换（隐式）"></a>类型判断和转换（隐式）</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551257156046.png" alt></p><h3 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551257166446.png" alt></p><h3 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551257170070.png" alt></p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551257174789.png" alt></p><h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551257178765.png" alt></p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551257419126.png" alt></p><h3 id="方法（函数）定义"><a href="#方法（函数）定义" class="headerlink" title="方法（函数）定义"></a>方法（函数）定义</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551257488776.png" alt></p><h3 id="带返回值的方法（函数）"><a href="#带返回值的方法（函数）" class="headerlink" title="带返回值的方法（函数）"></a>带返回值的方法（函数）</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551257493574.png" alt></p><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/1551257723607.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin协程</title>
      <link href="/2019/08/11/coroutine/"/>
      <url>/2019/08/11/coroutine/</url>
      
        <content type="html"><![CDATA[<h1 id="协程（Coroutine）"><a href="#协程（Coroutine）" class="headerlink" title="协程（Coroutine）"></a>协程（Coroutine）</h1><h2 id="协程引入"><a href="#协程引入" class="headerlink" title="协程引入"></a>协程引入</h2><p>异步加载图片</p><ul><li><p><strong>普通代码</strong>：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">val</span> view <span class="token operator">=</span> <span class="token operator">..</span><span class="token punctuation">.</span>  <span class="token function">loadImageAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token punctuation">{</span>      bitmap <span class="token operator">-></span>      uiThread<span class="token punctuation">{</span>          view<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>  异常捕获：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">val</span> view <span class="token operator">=</span> <span class="token operator">..</span><span class="token punctuation">.</span>      <span class="token function">loadImageAsync</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token punctuation">{</span>          <span class="token keyword">fun</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>bitmap<span class="token operator">:</span> Bitmap<span class="token punctuation">)</span><span class="token punctuation">{</span>              uiThread<span class="token punctuation">{</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      view<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span>                  <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> Exception<span class="token punctuation">)</span><span class="token punctuation">{</span>                      <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>      <span class="token punctuation">}</span>          <span class="token keyword">fun</span> <span class="token function">onError</span><span class="token punctuation">(</span>error<span class="token operator">:</span> Throwable<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> Exception<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>  &nbsp;</p></li><li><p><strong>协程代码</strong>：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token function">launch</span><span class="token punctuation">(</span>UI<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">val</span> view <span class="token operator">=</span> <span class="token operator">..</span><span class="token punctuation">.</span>      <span class="token keyword">val</span> deferred <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">}</span>      view<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>deferred<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>  异常捕获：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token function">launch</span><span class="token punctuation">(</span>UI<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">val</span> view <span class="token operator">=</span> <span class="token operator">..</span><span class="token punctuation">.</span>          <span class="token keyword">val</span> deferred <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">loadImage</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">}</span>          view<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>deferred<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> Exception<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token function">handleError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>&nbsp;<br>通过上面的例子对比，可以发现使用协程的优点：<br>把异步的代码转换成同步的写法，免除了回调的问题，并且不会阻塞线程；<br>请求结果返回时协程自动帮我们切回到主线程；<br>异常的处理比较简洁，协程内部的异常使用一个try…catch即可捕获；</p></li></ul><h2 id="协程概念"><a href="#协程概念" class="headerlink" title="协程概念"></a>协程概念</h2><p>协程是一种非抢占式或者说协作式的计算机程序并发调度的实现，程序可以主动挂起或者恢复执行。</p><p>协程和线程，进程不同，它通常不是由操作系统底层直接支持，而是通过编译器和应用层的库实现。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/kotlin_share_img1.png" alt></p><h2 id="Kotlin协程框程架"><a href="#Kotlin协程框程架" class="headerlink" title="Kotlin协程框程架"></a>Kotlin协程框程架</h2><p>协程正式版1.0在Kotlin 1.3 上发布，协程的语言支持与 API 已完全稳定。<br>此后 kotlin 协程不再会被标注为 <strong>experimental</strong>，在 Kotlin 1.3. 之后的版本就可以使用协程代码了。</p><h3 id="引入协程库"><a href="#引入协程库" class="headerlink" title="引入协程库"></a>引入协程库</h3><pre class=" language-gradle"><code class="language-gradle">dependencies {  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.2'}</code></pre><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/kotlin_share_img2.png" alt></p><h3 id="协程基本术语"><a href="#协程基本术语" class="headerlink" title="协程基本术语"></a>协程基本术语</h3><ul><li><strong>协程</strong>（coroutine）<br>可挂起计算的实例。它在概念上类似于线程，在这个意义上，它需要一个代码块运行，并具有类似的生命周期 —— 它可以被创建与启动，但它不绑定到任何特定的线程。<br>它可以在一个线程中挂起其执行，并在另一个线程中恢复。而且，像 <strong>future</strong> 或 <strong>promise</strong> 那样，它在执行结束时可能返回某种结果（值或异常）。<br>&nbsp;</li><li><strong>挂起函数</strong>（suspending function）</li></ul><p><strong>suspend</strong> 修饰符标记的函数。它可能会通过调用其他 <strong>挂起函数</strong> 挂起执行代码，而不阻塞当前执行线程。<br><strong>挂起函数</strong> 不能在常规代码中被调用，只能在其他 <strong>挂起函数</strong> 或 <strong>挂起 lambda 表达式</strong> 中。<br>在 Android Studio 中 <strong>挂起函数</strong> 旁边会有一个特殊的标记符号，告诉开发者这是一个 <strong>挂起函数</strong>。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829153302.png" alt><br>&nbsp;</p><ul><li><strong>挂起 lambda 表达式</strong>（suspending lambda）<br>必须在 <strong>协程</strong> 中运行的代码块。它看起来很像一个普通的 lambda 表达式，但它的函数类型被 <strong>suspend</strong> 修饰符标记。</li></ul><p><strong>挂起 lambda 表达式</strong> 是 <strong>匿名挂起函数</strong> 的短语法形式。它可能会通过调用其他 <strong>挂起函数</strong> 挂起执行代码，而不阻塞当前执行线程。<br>&nbsp;<br>比如Kotlin协程库的 <strong>launch</strong> 函数的最后一个参数就是 <strong>挂起 lambda 表达式</strong>。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829153321.png" alt><br><strong>suspend CoroutineScope.() -&gt; Unit</strong>，这个类型被称之为 <strong>挂起函数类型</strong>。 (suspending function type)</p><p>&nbsp;</p><ul><li><strong>协程构建器</strong>（coroutine builder）<br>使用一些 <strong>挂起 lambda 表达式</strong> 作为参数来创建一个 <strong>协程</strong> 的函数。<br>Kotlin 定义了一些基础的构建 <strong>协程</strong> 的函数，比如 <strong>launch{}</strong>、<strong>future{}</strong> 、 <strong>sequence{}</strong> 等。<br>使用这些基础的 <strong>建构函数</strong> 可以构造其他 <strong>协程</strong> 实例。</li></ul><p>&nbsp;</p><ul><li><strong>挂起点</strong>（suspension point）</li></ul><p><strong>协程</strong> 执行过程中可能被挂起的位置。<br>从语法上说，<strong>挂起点</strong> 是对一个 <strong>挂起函数</strong> 的调用，但实际的挂起在 <strong>挂起函数</strong> 调用了标准库中的原始 <strong>挂起函数</strong> 时发生。<br>&nbsp;</p><ul><li><strong>续体</strong>（continuation）</li></ul><p><strong>续体</strong> 是挂起的 <strong>协程</strong> 在 <strong>挂起点</strong> 时的状态。它在概念上代表它在 <strong>挂起点</strong> 之后的剩余应执行的代码。<br>    <code>kotlin      sequence {          for (i in 1..10) yield(i * i)          println(&quot;over&quot;)      }</code><br>    这里，每次调用挂起函数 yield()时，协程都会挂起，其执行的剩余部分被视作 <strong>续体</strong>。<br>    所以有 10 个续体：循环运行第一次后，i=2，挂起；循环运行第二次后，i=3，挂起……最后一次打印“over”并完结协程。</p><h3 id="协程的启动"><a href="#协程的启动" class="headerlink" title="协程的启动"></a>协程的启动</h3><p>1.简单以 <strong>CoroutineScope</strong> 的扩展函数 <strong>launch</strong> 启动一个协程:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在后台启动一个新的协程并继续</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 非阻塞的等待 1 秒钟（默认时间单位是毫秒）</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"World!"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 在延迟后打印输出</span>    <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 协程已在等待时主线程还在继续</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000L</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 阻塞主线程 2 秒钟来保证 JVM 存活</span><span class="token punctuation">}</span></code></pre><p><strong>launch</strong> 函数有三个参数：分别是 <strong>上下文</strong>、<strong>启动模式</strong>、<strong>协程体</strong>。<br><strong>launch</strong> 函数的返回值是 <strong>Job</strong> 类型。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>    context<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> EmptyCoroutineContext<span class="token punctuation">,</span>    start<span class="token operator">:</span> CoroutineStart <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span>    block<span class="token operator">:</span> suspend CoroutineScope<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token operator">:</span> Job <span class="token punctuation">{</span>    <span class="token keyword">val</span> newContext <span class="token operator">=</span> <span class="token function">newCoroutineContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    <span class="token keyword">val</span> coroutine <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token punctuation">.</span>isLazy<span class="token punctuation">)</span>        <span class="token function">LazyStandaloneCoroutine</span><span class="token punctuation">(</span>newContext<span class="token punctuation">,</span> block<span class="token punctuation">)</span> <span class="token keyword">else</span>        <span class="token function">StandaloneCoroutine</span><span class="token punctuation">(</span>newContext<span class="token punctuation">,</span> active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    coroutine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> coroutine<span class="token punctuation">,</span> block<span class="token punctuation">)</span>    <span class="token keyword">return</span> coroutine<span class="token punctuation">}</span></code></pre><p>&nbsp;</p><ul><li><p>参数：上下文<br>上下文，它的接口类型是 <strong>CoroutineContext</strong><br>&nbsp;</p></li><li><p>参数：启动模式<br>启动模式为 <strong>CoroutineStart</strong> 枚举类型</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token keyword">class</span> CoroutineStart <span class="token punctuation">{</span>      DEFAULT<span class="token punctuation">,</span>      LAZY<span class="token punctuation">,</span>      <span class="token annotation builtin">@ExperimentalCoroutinesApi</span>      ATOMIC<span class="token punctuation">,</span>      <span class="token annotation builtin">@ExperimentalCoroutinesApi</span>      UNDISPATCHED<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>  四个启动模式中，最常用的其实是 <strong>DEFAULT</strong> 和 <strong>LAZY</strong>。</p></li></ul><table><thead><tr><th>启动模式</th><th>功能特性</th></tr></thead><tbody><tr><td>DEFAULT</td><td>立即开始执行协程体</td></tr><tr><td>LAZY</td><td>只有在需要（start、join、await）时才开始执行</td></tr><tr><td>ATOMIC</td><td>立即执行协程体，但在第一个挂起点前不能被取消</td></tr><tr><td>UNDISPATCHED</td><td>立即在当前线程执行协程体，直到第一个挂起点（后面取决于调度器）</td></tr></tbody></table><p>&nbsp;</p><ul><li>参数：协程体<br>协程体为一个 <strong>挂起函数</strong>，类型为<strong>suspend CoroutineScope.() -&gt; Unit</strong>，是个 <strong>挂起lambda表达式</strong>。<br>&nbsp;</li><li>返回值：Job</li></ul><p><strong>CoroutineScope.launch</strong> 函数返回一个 <strong>Job</strong> 对象，该对象代表了这个刚刚创建的 协程实例。<br><strong>Job</strong> 对象有不同的状态（刚创建的状态、活跃的状态、执行完毕的状态、取消状态等）。</p><table><thead><tr><th><strong>State</strong></th><th>isActive</th><th>isCompleted</th><th>isCancelled</th></tr></thead><tbody><tr><td><em>New</em> (可选的初始状态)</td><td><code>false</code></td><td><code>false</code></td><td><code>false</code></td></tr><tr><td><em>Active</em> (默认的初始状态)</td><td><code>true</code></td><td><code>false</code></td><td><code>false</code></td></tr><tr><td><em>Completing</em> (中间状态)</td><td><code>true</code></td><td><code>false</code></td><td><code>false</code></td></tr><tr><td><em>Cancelling</em> (中间状态)</td><td><code>false</code></td><td><code>false</code></td><td><code>true</code></td></tr><tr><td><em>Cancelled</em> (最终状态)</td><td><code>false</code></td><td><code>true</code></td><td><code>true</code></td></tr><tr><td><em>Completed</em> (最终状态)</td><td><code>false</code></td><td><code>true</code></td><td><code>false</code></td></tr></tbody></table><p>一般而言，<strong>Job</strong> 创建后都处于 <strong>active</strong> 状态，表示这个 <strong>Job</strong> 已经被创建并且被启动了。<br>通过 <strong>协程构建器</strong> 函数的 <strong>start</strong> 参数可以修改这个状态。<br>比如如果使用 <strong>CoroutineStart.LAZY</strong> 作为 <strong>start</strong> 参数，则创建的 <strong>Job</strong> 处于 <strong>new</strong> 状态，<br>这个时候需要通过调用 <strong>Job</strong> 的 <strong>start</strong> 或者 <strong>join</strong> 函数来把该 <strong>Job</strong> 转换为 <strong>active</strong> 状态。</p><p>处于 <strong>active</strong> 状态的 <strong>Job</strong> 表示 协程 正在执行。<br>如果执行过程中抛出了异常则会把该 <strong>Job</strong> 标记为 <strong>cancelling</strong> 状态。<br>除此之外，还可以通过调用 <strong>cancel</strong> 函数来把 <strong>Job</strong> 转换为 <strong>cancelling</strong> 状态。<br>然后当 <strong>Job</strong> 完成后就处于 <strong>cancelled</strong> 状态。</p><p><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829153314.png" alt></p><p>具有多个子 <strong>Job</strong> 的父 <strong>Job</strong> 会等待所有子 <strong>job</strong> 完成(或者取消)后，自己才会执行完成。</p><p>示例，调用 <strong>cancel</strong> 函数取消协程执行。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//sampleStart</span>    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span>        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-></span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"job: I'm sleeping <span class="token interpolation variable">$i</span> ..."</span><span class="token punctuation">)</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 延迟一段时间</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main: I'm tired of waiting!"</span><span class="token punctuation">)</span>    job<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 取消该任务</span>    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 等待任务执行结束</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main: Now I can quit."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//sampleEnd</span><span class="token punctuation">}</span></code></pre><p>程序执行后的输出：</p><pre><code>job: I&#39;m sleeping 0 ...job: I&#39;m sleeping 1 ...job: I&#39;m sleeping 2 ...main: I&#39;m tired of waiting!main: Now I can quit.</code></pre><p>&nbsp;<br>2.使用 <strong>async</strong> 启动一个协程：<br>在概念上，<strong>async</strong> 就类似于 <strong>launch</strong>。它启动了一个单独的协程，这是一个轻量级的线程并与其它所有的协程一起并发地工作。<br>不同之处在于 <strong>launch</strong> 返回一个<strong>Job</strong> 并且不附带任何结果值，而 <strong>async</strong> 返回一个 <strong>Deferred</strong>。</p><p><strong>Deferred</strong> 继承自 <strong>Job</strong>，所以通过 <strong>Deferred</strong> 也可以和 <strong>Job</strong> 一样来控制这个 协程。 </p><p><strong>Deferred</strong> 类似于 Java 里面的 <strong>future</strong>，一个轻量级的非阻塞 <strong>future</strong>。<br>通过调用 <strong>Deferred</strong> 对象的 <strong>await()</strong> 函数来等待异步结果的返回。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> one <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token keyword">val</span> two <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The answer is <span class="token interpolation"><span class="token delimiter variable">${</span>one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>suspend <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">13</span><span class="token punctuation">}</span>suspend <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">29</span><span class="token punctuation">}</span></code></pre><p>程序执行后的输出：</p><pre><code>The answer is 42</code></pre><h3 id="协程的调度"><a href="#协程的调度" class="headerlink" title="协程的调度"></a>协程的调度</h3><p>上面提到协程上下文作为launch函数的参数。</p><p><strong>CoroutineContext</strong> 接口的定义：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@SinceKotlin</span><span class="token punctuation">(</span><span class="token string">"1.3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> CoroutineContext <span class="token punctuation">{</span>    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token operator">&lt;</span>E <span class="token operator">:</span> Element<span class="token operator">></span> <span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token operator">:</span> Key<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> E<span class="token operator">?</span>    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">fold</span><span class="token punctuation">(</span>initial<span class="token operator">:</span> R<span class="token punctuation">,</span> operation<span class="token operator">:</span> <span class="token punctuation">(</span>R<span class="token punctuation">,</span> Element<span class="token punctuation">)</span> <span class="token operator">-></span> R<span class="token punctuation">)</span><span class="token operator">:</span> R    <span class="token keyword">public</span> operator <span class="token keyword">fun</span> <span class="token function">plus</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">)</span><span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> <span class="token operator">..</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">minusKey</span><span class="token punctuation">(</span>key<span class="token operator">:</span> Key<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> CoroutineContext    <span class="token keyword">public</span> <span class="token keyword">interface</span> Key<span class="token operator">&lt;</span>E <span class="token operator">:</span> Element<span class="token operator">></span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> Element <span class="token operator">:</span> CoroutineContext <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">val</span> key<span class="token operator">:</span> Key<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span>        <span class="token operator">..</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CoroutineContext</strong> 类似一个集合，它的元素就是源码中看到的 Element。<br>每一个 Element 都有一个 key，因此它可以作为元素出现，同时它也是 CoroutineContext 的子接口，因此也可以作为集合出现。</p><p>通常我们见到的上下文的类型是 <strong>CombinedContext</strong> 或者 <strong>EmptyCoroutineContext</strong><br>一个表示上下文的组合，另一个表示什么功能都没有的空的上下文。</p><p><strong>CoroutineContext</strong> 有两个非常重要的元素：<strong>Job</strong> 和 <strong>Dispatcher</strong>。<br><strong>Job</strong> 是当前的协程的实例，而 <strong>Dispatcher</strong> 决定了当前协程体执行的线程。</p><p>我们在协程体里面访问到的 <strong>coroutineContext</strong> 大多是这个 <strong>CombinedContext</strong> 类型，表示有很多具体的上下文实现的集合。<br>我们如果想要找到某一个特别的上下文实现，就需要用对应的 <strong>Key</strong> 来查找：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>launch<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>ContinuationInterceptor<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>coroutineContext<span class="token punctuation">[</span>Job<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//StandaloneCoroutine{Active}@4f5a4106</span>        <span class="token function">println</span><span class="token punctuation">(</span>coroutineContext<span class="token punctuation">[</span>ContinuationInterceptor<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//DefaultDispatcher</span>    <span class="token punctuation">}</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>&nbsp;<br><strong>Job</strong> 是一个 <strong>CoroutineContext.Element</strong> 的实现，内部有个伴生对象 <strong>Key</strong>；<br>coroutineContext[<strong>Job</strong>] 这里的 <strong>Job</strong> 实际上是对它的伴生对象的引用。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">interface</span> Job <span class="token operator">:</span> CoroutineContext<span class="token punctuation">.</span><span class="token function">Element</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Key for [Job] instance in the coroutine context.     */</span>    <span class="token keyword">public</span> <span class="token keyword">companion</span> <span class="token keyword">object</span> Key <span class="token operator">:</span> CoroutineContext<span class="token punctuation">.</span>Key<span class="token operator">&lt;</span>Job<span class="token operator">></span> <span class="token punctuation">{</span> <span class="token operator">..</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>    <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p><strong>ContinuationInterceptor</strong> 表示续体拦截器（以下简称拦截器），也是一个 <strong>CoroutineContext.Element</strong> 的实现。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@SinceKotlin</span><span class="token punctuation">(</span><span class="token string">"1.3"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> ContinuationInterceptor <span class="token operator">:</span> CoroutineContext<span class="token punctuation">.</span><span class="token function">Element</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * The key that defines *the* context interceptor.     */</span>        <span class="token keyword">companion</span> <span class="token keyword">object</span> Key <span class="token operator">:</span> CoroutineContext<span class="token punctuation">.</span>Key<span class="token operator">&lt;</span>ContinuationInterceptor<span class="token operator">></span>    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">interceptContinuation</span><span class="token punctuation">(</span>continuation<span class="token operator">:</span> Continuation<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> Continuation<span class="token operator">&lt;</span>T<span class="token operator">></span>    <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>拦截器可以左右你的协程的执行。</p><p>以下是自定义拦截器的例子。让协程代码块运行在自定义的线程中。</p><pre class=" language-kotlin"><code class="language-kotlin">suspend <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> job<span class="token operator">:</span> Job <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token function">MyContinuationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        launch <span class="token punctuation">{</span>            Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> MyContinuationInterceptor <span class="token operator">:</span> ContinuationInterceptor <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> key <span class="token operator">=</span> ContinuationInterceptor    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">interceptContinuation</span><span class="token punctuation">(</span>continuation<span class="token operator">:</span> Continuation<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> Continuation<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">MyContinuation</span><span class="token punctuation">(</span>continuation<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> MyContinuation<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">val</span> continuation<span class="token operator">:</span> Continuation<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">:</span> Continuation<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> context<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> continuation<span class="token punctuation">.</span>context    <span class="token keyword">private</span> <span class="token keyword">val</span> executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span> <span class="token punctuation">{</span>        <span class="token function">Thread</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> <span class="token string">"MyThreadExecutor"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>isDaemon <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">resumeWith</span><span class="token punctuation">(</span>result<span class="token operator">:</span> Result<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        executor<span class="token punctuation">.</span><span class="token function">submit</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//切换线程（模拟简单的协程调度器）</span>            continuation<span class="token punctuation">.</span><span class="token function">resumeWith</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>所有协程启动的时候，都会有一次 Continuation.resumeWith 的操作。<br>对于受MyContinuationInterceptor影响的协程启动时，都会执行MyContinuation.resumeWith<br>delay 是挂起点，1000ms 之后需要继续调度执行该协程，也会执行MyContinuation.resumeWith</p><pre><code>18:01:41:337 [main] MyContinuation.resumeWith(ConsoleMain3.kt:46): Success(kotlin.Unit)  // ①18:01:41:358 [MyThreadExecutor] ConsoleMain3Kt$main$job$1.invokeSuspend(ConsoleMain3.kt:20): 118:01:42:371 [kotlinx.coroutines.DefaultExecutor] MyContinuation.resumeWith(ConsoleMain3.kt:46): Success(kotlin.Unit)  // ②18:01:42:372 [MyThreadExecutor] ConsoleMain3Kt$main$job$1.invokeSuspend(ConsoleMain3.kt:22): 218:01:42:375 [MyThreadExecutor] MyContinuation.resumeWith(ConsoleMain3.kt:46): Success(kotlin.Unit)  // ③18:01:42:376 [MyThreadExecutor] ConsoleMain3Kt$main$job$1$1.invokeSuspend(ConsoleMain3.kt:24): 3</code></pre><p>&nbsp;</p><p>Kotlin协程库中有专门的拦截器的实现，叫做 <strong>CoroutineDispatcher</strong>（协程调度器，以下简称调度器）<br>它确定了相应的协程在执行时使用哪些线程。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> CoroutineDispatcher <span class="token operator">:</span>    <span class="token function">AbstractCoroutineContextElement</span><span class="token punctuation">(</span>ContinuationInterceptor<span class="token punctuation">)</span><span class="token punctuation">,</span> ContinuationInterceptor <span class="token punctuation">{</span>    <span class="token operator">..</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">,</span> block<span class="token operator">:</span> Runnable<span class="token punctuation">)</span>    <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>它本身是协程上下文的子类，同时实现了拦截器的接口， dispatch 方法会在拦截器的方法 interceptContinuation 中调用，进而实现协程的调度。<br>所以如果我们想要实现自己的调度器，继承这个类就可以了。<br>不过通常我们都用协程框架提供的，它们定义在 Dispatchers 当中：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> actual <span class="token keyword">object</span> Dispatchers <span class="token punctuation">{</span>    <span class="token annotation builtin">@JvmStatic</span>    <span class="token keyword">public</span> actual <span class="token keyword">val</span> Default<span class="token operator">:</span> CoroutineDispatcher <span class="token operator">=</span> <span class="token function">createDefaultDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token annotation builtin">@JvmStatic</span>    <span class="token keyword">public</span> actual <span class="token keyword">val</span> Main<span class="token operator">:</span> MainCoroutineDispatcher <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> MainDispatcherLoader<span class="token punctuation">.</span>dispatcher    <span class="token annotation builtin">@JvmStatic</span>    <span class="token keyword">public</span> actual <span class="token keyword">val</span> Unconfined<span class="token operator">:</span> CoroutineDispatcher <span class="token operator">=</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>Unconfined    <span class="token annotation builtin">@JvmStatic</span>    <span class="token keyword">public</span> <span class="token keyword">val</span> IO<span class="token operator">:</span> CoroutineDispatcher <span class="token operator">=</span> DefaultScheduler<span class="token punctuation">.</span>IO<span class="token punctuation">}</span></code></pre><table><thead><tr><th>调度器</th><th>JVM</th></tr></thead><tbody><tr><td>Default</td><td>线程池</td></tr><tr><td>Main</td><td>UI线程</td></tr><tr><td>Unconfined</td><td>直接执行，直到遇到第一个挂起点</td></tr><tr><td>IO</td><td>线程池</td></tr></tbody></table><p>指定调度器启动协程：</p><pre class=" language-kotlin"><code class="language-kotlin">suspend <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/** Dispatchers.Default **/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>GlobalScope.launch</strong> 默认使用 <strong>DefaultDispatcher</strong> 调度任务。<br><strong>Dispatchers.Main</strong> 来确保 <strong>launch</strong> 启动的协程在调度时始终调度到 UI 线程。<br>在 Android 当中，<strong>Dispatchers.Main</strong> 引用的实例是 <strong>HandlerDispatcher</strong> 。</p><p>执行结果如下：</p><pre><code>19:07:31:494 [DefaultDispatcher-worker-1] DispatchKt$main$2.invokeSuspend(Dispatch.kt:23): 119:07:31:591 [AWT-EventQueue-0] DispatchKt$main$2$1.invokeSuspend(Dispatch.kt:25): 2</code></pre><p>&nbsp;<br>其他创建调度器的方式：</p><ul><li><strong>newSingleThreadContext</strong> 创建线程池中只有一个线程的Dispatcher，使用完毕后需要close。</li><li><strong>newFixedThreadPoolContext</strong> 创建在私有的线程池中运行的 Dispatcher，使用完毕后需要close。</li><li><strong>Executor.asCoroutineDispatcher</strong>  把Executor 对象转换为一个 Dispatcher 使用。</li></ul><pre class=" language-kotlin"><code class="language-kotlin">suspend <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span> <span class="token punctuation">{</span> r <span class="token operator">-></span> <span class="token function">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"MyThread"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token function">asCoroutineDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span> dispatcher <span class="token operator">-></span>            GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>dispatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>19:01:36:027 [MyThread] DispatchKt$main$3$1.invokeSuspend(Dispatch.kt:13): 119:01:36:051 [MyThread] DispatchKt.main(Dispatch.kt:16): 2</code></pre><h3 id="协程的异常处理"><a href="#协程的异常处理" class="headerlink" title="协程的异常处理"></a>协程的异常处理</h3><p>通过一个在 <strong>GlobalScope</strong> 中创建协程的示例来看一下协程的异常处理，中间添加了异常捕获。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>    <span class="token keyword">val</span> job <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"launch new coroutine"</span><span class="token punctuation">)</span>            launch <span class="token punctuation">{</span>                Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Throwing exception from launch"</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token function">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Caught launch Exception: <span class="token interpolation variable">$e</span>"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//①</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Joined failed job"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> deferred <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">async</span> <span class="token punctuation">{</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Throwing exception from async"</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token function">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 没有打印任何东西，依赖用户去调用等待</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        deferred<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Unreached"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> ArithmeticException<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Caught ArithmeticException"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//②</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token number">16</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">654</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">:</span> launch new coroutine<span class="token number">16</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">671</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">3</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span>$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">:</span> Throwing exception from launchException <span class="token keyword">in</span> thread <span class="token string">"DefaultDispatcher-worker-1 @coroutine#3"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IndexOutOfBoundsException    at com<span class="token punctuation">.</span>coroutine<span class="token punctuation">.</span>console<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span>$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span>    at kotlin<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>BaseContinuationImpl<span class="token punctuation">.</span><span class="token function">resumeWith</span><span class="token punctuation">(</span>ContinuationImpl<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">)</span>    at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>DispatchedTask<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Dispatched<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">238</span><span class="token punctuation">)</span>    at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>CoroutineScheduler<span class="token punctuation">.</span><span class="token function">runSafely</span><span class="token punctuation">(</span>CoroutineScheduler<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">594</span><span class="token punctuation">)</span>    at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>CoroutineScheduler<span class="token punctuation">.</span>access$<span class="token function">runSafely</span><span class="token punctuation">(</span>CoroutineScheduler<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">)</span>    at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>CoroutineScheduler$Worker<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>CoroutineScheduler<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">742</span><span class="token punctuation">)</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">678</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token operator">:</span> Joined failed job<span class="token number">16</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">680</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">4</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$deferred$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token operator">:</span> Throwing exception from async<span class="token number">16</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">712</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token operator">:</span> Caught ArithmeticException</code></pre><p>从上面的输出的log，会发现并没有捕获到①处的异常。②处的异常却被捕获到了。</p><p>不同的协程构建器函数有不同的异常传递策略，在协程中异常传递分为两种类型。<br>一种是自动向上传递（<strong>launch</strong> 和 <strong>actor</strong>），另外一种是把错误信息暴露给调用者（<strong>async</strong> 和 <strong>produce</strong>）。<br>前者对待异常是不处理的，类似于 Java 的 <strong>Thread.uncaughtExceptionHandler</strong> ，而后者依赖调用者来最终处理异常。</p><p>如果把代码改写成以下就可以捕获到异常：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>    <span class="token keyword">val</span> handler <span class="token operator">=</span> CoroutineExceptionHandler <span class="token punctuation">{</span> _<span class="token punctuation">,</span> exception <span class="token operator">-></span>        Logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Caught <span class="token interpolation variable">$exception</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">val</span> job <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"launch new coroutine"</span><span class="token punctuation">)</span>        launch <span class="token punctuation">{</span>            Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Throwing exception from launch"</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token function">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Joined failed job"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> deferred <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">async</span> <span class="token punctuation">{</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Throwing exception from async"</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token function">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 没有打印任何东西，依赖用户去调用等待</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        deferred<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Unreached"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> ArithmeticException<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Caught ArithmeticException"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//②</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token number">16</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">861</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token operator">:</span> launch new coroutine<span class="token number">16</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">877</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">3</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span>$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">:</span> Throwing exception from launch<span class="token number">16</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">881</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">3</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$invokeSuspend$$inlined$CoroutineExceptionHandler$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">handleException</span><span class="token punctuation">(</span>CoroutineExceptionHandler<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">82</span><span class="token punctuation">)</span><span class="token operator">:</span> Caught java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IndexOutOfBoundsException<span class="token number">16</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">882</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">:</span> Joined failed job<span class="token number">16</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">883</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">4</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$deferred$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token operator">:</span> Throwing exception from async<span class="token number">16</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">915</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">:</span> Caught ArithmeticException</code></pre><p>&nbsp;<br><strong>CoroutineExceptionHandler</strong><br>对于通过 <strong>launch</strong> 和 <strong>actor</strong> 构建器创建的协程，如果里面抛出了异常需要通过 <strong>CoroutineExceptionHandler</strong> 来捕获异常。<br><strong>CoroutineExceptionHandler</strong> 类似于 <strong>Thread.uncaughtExceptionHandler</strong> 全局异常处理。<br><strong>CoroutineExceptionHandler</strong> 并不算是一个全局的异常捕获，因为它只能捕获对应协程内未捕获的异常。</p><p>从上面代码看到 <strong>CoroutineExceptionHandler</strong> 可以作为 <strong>launch</strong> 函数的参数，也能猜到其类型属于 <strong>CoroutineContext</strong>。</p><p><strong>CoroutineExceptionHandler</strong> 接口定义：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">interface</span> CoroutineExceptionHandler <span class="token operator">:</span> CoroutineContext<span class="token punctuation">.</span><span class="token function">Element</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Key for [CoroutineExceptionHandler] instance in the coroutine context.     */</span>    <span class="token keyword">public</span> <span class="token keyword">companion</span> <span class="token keyword">object</span> Key <span class="token operator">:</span> CoroutineContext<span class="token punctuation">.</span>Key<span class="token operator">&lt;</span>CoroutineExceptionHandler<span class="token operator">></span>    <span class="token comment" spellcheck="true">/**     * Handles uncaught [exception] in the given [context]. It is invoked     * if coroutine has an uncaught exception.     */</span>    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">handleException</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">,</span> exception<span class="token operator">:</span> Throwable<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>&nbsp;<br><strong>异常的传播</strong></p><p>异常传播还涉及到 <strong>CoroutineScope</strong> （协程作用域，以下简称作用域）的概念。</p><p><strong>CoroutineScope</strong>接口的定义：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">interface</span> CoroutineScope <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">val</span> coroutineContext<span class="token operator">:</span> CoroutineContext<span class="token punctuation">}</span></code></pre><p><strong>CoroutineScope</strong>  是 <strong>kotlinx.coroutines</strong> 提供的一个抽象的封装，用来管理协程的生命周期。</p><p>比如：<br>在Android程序在上下文中启动了多个协程来为某个activity 进行异步操作来拉取以及更新数据，或作动画等。<br>当 activity 被销毁的时候这些协程必须被取消以防止内存泄漏。就需要用到 <strong>CoroutineScope</strong>，<br>这样当这个 <strong>CoroutineScope</strong> 被取消的时候，里面所有的子协程也会自动取消。</p><p>每个协程构建器都是 <strong>CoroutineScope</strong> 的扩展函数，并且自动的继承了当前作用域的 <strong>coroutineContext</strong>。<br>所以要使用协程必须要先创建一个对应的 <strong>CoroutineScope</strong>。</p><p>协程执行代码块的 <strong>this</strong> 字段就代表了当前使用的 <strong>CoroutineScope</strong> 实例。<br>所以就能够在其内部继续启动子协程，比如下面的嵌套的 <strong>launch</strong><br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829153317.png" alt></p><ul><li><p>取消与异常<br>取消与异常紧密相关。协程内部使用 <strong>CancellationException</strong> 来进行取消。<br>这个异常会被所有的处理者忽略，所以那些可以被 catch 代码块捕获的异常 仅仅应该被用来作为额外调试信息的资源。<br>例子1：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>      <span class="token keyword">val</span> job1 <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>          <span class="token keyword">val</span> job2 <span class="token operator">=</span> launch <span class="token punctuation">{</span>              Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>              <span class="token keyword">throw</span> <span class="token function">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              job2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span><span class="token punctuation">{</span>              Logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Caught exception: <span class="token interpolation variable">$e</span>"</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      job1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>  子协程launch抛出异常之后，会把父协程给cancel掉了。<br>  父协程已经被cancel，如果再调用 job2.join 就会抛出 <strong>JobCancellationException</strong>。<br>  &nbsp;<br>  运行结果：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">135</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">151</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">3</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">1</span>$job2$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">2</span>  <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">172</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token operator">:</span> Caught exception<span class="token operator">:</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>JobCancellationException<span class="token operator">:</span> StandaloneCoroutine <span class="token keyword">is</span> cancelling<span class="token punctuation">;</span> job<span class="token operator">=</span><span class="token string">"coroutine#2"</span><span class="token operator">:</span>StandaloneCoroutine<span class="token punctuation">{</span>Cancelling<span class="token punctuation">}</span><span class="token label symbol">@31498115</span>  Exception <span class="token keyword">in</span> thread <span class="token string">"DefaultDispatcher-worker-1 @coroutine#2"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IndexOutOfBoundsException      at com<span class="token punctuation">.</span>coroutine<span class="token punctuation">.</span>console<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">1</span>$job2$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">13</span><span class="token punctuation">)</span>      at kotlin<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>BaseContinuationImpl<span class="token punctuation">.</span><span class="token function">resumeWith</span><span class="token punctuation">(</span>ContinuationImpl<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">)</span>      at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>DispatchedTask<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Dispatched<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">238</span><span class="token punctuation">)</span>      at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>CoroutineScheduler<span class="token punctuation">.</span><span class="token function">runSafely</span><span class="token punctuation">(</span>CoroutineScheduler<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">594</span><span class="token punctuation">)</span>      at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>CoroutineScheduler<span class="token punctuation">.</span>access$<span class="token function">runSafely</span><span class="token punctuation">(</span>CoroutineScheduler<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">)</span>      at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>CoroutineScheduler$Worker<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>CoroutineScheduler<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">742</span><span class="token punctuation">)</span>  <span class="token number">17</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">179</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">4</span></code></pre><p>  上面例子也说明了异常的传播方向，子协程会把异常传给了父协程，导致父协程被取消。<br>  &nbsp;<br>  例子2：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>      <span class="token keyword">val</span> job1 <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>CoroutineExceptionHandler <span class="token punctuation">{</span> _<span class="token punctuation">,</span> exception <span class="token operator">-></span>          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"#1 Caught <span class="token interpolation variable">$exception</span>"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//①</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>          <span class="token keyword">val</span> job2 <span class="token operator">=</span> <span class="token function">launch</span><span class="token punctuation">(</span>CoroutineExceptionHandler <span class="token punctuation">{</span> _<span class="token punctuation">,</span> exception <span class="token operator">-></span>              Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"#2 Caught <span class="token interpolation variable">$exception</span>"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//②</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>              <span class="token keyword">throw</span> <span class="token function">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          job2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      job1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>  从运行结果来看，②处并没有输出异常信息，①处输出了异常信息。再次证明了子协程会把异常传给了父协程。</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token number">18</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">688</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span> <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token number">18</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">706</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span> <span class="token label symbol">@coroutine</span>#<span class="token number">3</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">2</span>$job2$<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">2</span>  <span class="token number">18</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">726</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span> <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$invokeSuspend$$inlined$CoroutineExceptionHandler$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">handleException</span><span class="token punctuation">(</span>CoroutineExceptionHandler<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">82</span><span class="token punctuation">)</span><span class="token operator">:</span> #<span class="token number">1</span> Caught java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IndexOutOfBoundsException  <span class="token number">18</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">727</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">4</span></code></pre><p>  &nbsp;<br>  例子3：<br>  父协程遇到异常也会把子协程给取消掉。取消异常向下传播</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>      <span class="token keyword">val</span> job1 <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>          launch <span class="token punctuation">{</span>              Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>              <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>              Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>          <span class="token keyword">throw</span> <span class="token function">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      job1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p> 运行结果：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token number">18</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">788</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span> <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token number">18</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">03</span><span class="token operator">:</span><span class="token number">806</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span> <span class="token label symbol">@coroutine</span>#<span class="token number">3</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">1</span>$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">2</span>  Exception <span class="token keyword">in</span> thread <span class="token string">"DefaultDispatcher-worker-3 @coroutine#3"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IndexOutOfBoundsException      at com<span class="token punctuation">.</span>coroutine<span class="token punctuation">.</span>console<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">)</span>      at kotlin<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>BaseContinuationImpl<span class="token punctuation">.</span><span class="token function">resumeWith</span><span class="token punctuation">(</span>ContinuationImpl<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">)</span>      at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>DispatchedTask<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Dispatched<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">238</span><span class="token punctuation">)</span>      at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>CoroutineScheduler<span class="token punctuation">.</span><span class="token function">runSafely</span><span class="token punctuation">(</span>CoroutineScheduler<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">594</span><span class="token punctuation">)</span>      at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>CoroutineScheduler<span class="token punctuation">.</span>access$<span class="token function">runSafely</span><span class="token punctuation">(</span>CoroutineScheduler<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">)</span>      at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>CoroutineScheduler$Worker<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>CoroutineScheduler<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">742</span><span class="token punctuation">)</span>  <span class="token number">18</span><span class="token operator">:</span><span class="token number">35</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">856</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">4</span></code></pre><p>  上面的例子取消都是双向的：<br>  取消父任务会同时取消所有子任务，而某一个子任务出现的异常被取消，则会导致父任务和所有其他子任务也被同时取消。<br>  &nbsp;<br>  还有一种情况，取消是单向的。这种需求很常见。<br>  比如在Android应用中，打开一个界面，在这个Activity 的作用域内启动了多个任务加载不同的数据，<br>  而这些加载不同数据的子任务是相互独立的，某一个失败了不应该影响其他子任务的执行；<br>  而如果这个 Activity 退出被销毁了，则所有请求数据的子任务就没有必要了，需要被取消。<br>  这种行为可以通过 <strong>SupervisorJob</strong>（监督任务）来实现。<br>  &nbsp;<br>  <strong>SupervisorJob</strong> 它类似于常规的 <strong>Job</strong>，唯一的区别是 <strong>取消</strong> 只会向下传播。<br>  &nbsp;<br>  示例：<br>  子任务失败，不会取消其他子任务，也不会取消父任务。而父任务能够取消所有子任务的执行。</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>      <span class="token keyword">val</span> supervisor <span class="token operator">=</span> <span class="token function">SupervisorJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token function">with</span><span class="token punctuation">(</span><span class="token function">CoroutineScope</span><span class="token punctuation">(</span>coroutineContext <span class="token operator">+</span> supervisor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 启动第一个子任务</span>          <span class="token keyword">val</span> firstChild <span class="token operator">=</span> <span class="token function">launch</span><span class="token punctuation">(</span>CoroutineExceptionHandler <span class="token punctuation">{</span> _<span class="token punctuation">,</span> _ <span class="token operator">-></span>  Logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Caught Exception"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"First child is failing"</span><span class="token punctuation">)</span>              <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"First child is cancelled"</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 启动第二个子任务</span>          <span class="token keyword">val</span> secondChild <span class="token operator">=</span> launch <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 取消了第一个子任务且没有传播给第二个子任务</span>              Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"First child is cancelled: <span class="token interpolation"><span class="token delimiter variable">${</span>firstChild<span class="token punctuation">.</span>isCancelled<span class="token delimiter variable">}</span></span>, but second one is still active"</span><span class="token punctuation">)</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  <span class="token function">delay</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span>              <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">// 但是取消了监督的传播</span>                  Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Second child is cancelled because supervisor is cancelled"</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 等待直到第一个子任务失败且执行完成</span>          firstChild<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Cancelling supervisor"</span><span class="token punctuation">)</span>          supervisor<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          secondChild<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>  执行结果：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token number">20</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">828</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$<span class="token number">1</span>$firstChild$<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">:</span> First child <span class="token keyword">is</span> failing  <span class="token number">20</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">838</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$$special$$inlined$CoroutineExceptionHandler$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">handleException</span><span class="token punctuation">(</span>CoroutineExceptionHandler<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">82</span><span class="token punctuation">)</span><span class="token operator">:</span> Caught Exception  <span class="token number">20</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">839</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">3</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$<span class="token number">1</span>$secondChild$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token operator">:</span> First child <span class="token keyword">is</span> cancelled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> but second one <span class="token keyword">is</span> still active  <span class="token number">20</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">842</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token operator">:</span> Cancelling supervisor  <span class="token number">20</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">864</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">3</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$<span class="token number">1</span>$secondChild$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token operator">:</span> Second child <span class="token keyword">is</span> cancelled because supervisor <span class="token keyword">is</span> cancelled</code></pre><p>  &nbsp;<br>  <strong>supervisorScope</strong><br>  除了使用 <strong>SupervisorJob</strong>，也可以使用<strong>supervisorScope</strong>代替<strong>coroutineScope</strong>来实现相同的目的。<br>  它与 <strong>coroutineScope</strong> 的差异在于，它仅<strong>单向</strong>上传播 <strong>取消</strong>，并且只有在自身失败时才取消所有孩子。<br>  另外，子任务的执行失败不会传播给它的父任务。每一个子任务应该通过异常处理机制处理自身的异常。<br>  &nbsp;<br>  示例：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>      <span class="token keyword">val</span> job1 <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>CoroutineExceptionHandler <span class="token punctuation">{</span> _<span class="token punctuation">,</span> exception <span class="token operator">-></span>          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"#1 Caught <span class="token interpolation variable">$exception</span>"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//①</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>          supervisorScope <span class="token punctuation">{</span>              <span class="token function">launch</span><span class="token punctuation">(</span>CoroutineExceptionHandler <span class="token punctuation">{</span> _<span class="token punctuation">,</span> exception <span class="token operator">-></span>                  Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"#2 Caught <span class="token interpolation variable">$exception</span>"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//②</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span>                  <span class="token keyword">throw</span> <span class="token function">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span>              launch <span class="token punctuation">{</span>                  Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      job1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>  运行结果：</p><pre class=" language-kotlin"><code class="language-kotlin">  <span class="token number">20</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">322</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token number">20</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">347</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">3</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">2</span>$<span class="token number">1</span>$<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">2</span>  <span class="token number">20</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">348</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">3</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">2</span>$<span class="token number">1</span>$invokeSuspend$$inlined$CoroutineExceptionHandler$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">handleException</span><span class="token punctuation">(</span>CoroutineExceptionHandler<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">82</span><span class="token punctuation">)</span><span class="token operator">:</span> #<span class="token number">2</span> Caught java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IndexOutOfBoundsException  <span class="token number">20</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">349</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">2</span>$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">3</span>  <span class="token number">20</span><span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">350</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">4</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">2</span>$<span class="token number">1</span>$<span class="token number">3</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">4</span></code></pre><p>&nbsp;<br>总结：</p></li><li><p><strong>GlobeScope</strong> 启动的协程单独启动一个协程作用域，异常自己消化，不向外部传播。内部的子协程遵从默认的作用域规则。</p></li><li><p><strong>coroutineScope</strong> 是继承外部 Job 的上下文创建作用域，在其内部的取消操作是双向传播的，子协程未捕获的异常也会向上传递给父协程。它更适合一系列对等的协程并发的完成一项工作，任何一个子协程异常退出，那么整体都将退出。</p></li><li><p><strong>supervisorScope</strong> 同样继承外部作用域的上下文创建作用域，但其内部的取消操作是单向传播的，父协程向子协程传播，反之则不然，这意味着子协程出了异常并不会影响父协程以及其他兄弟协程。它更适合一些独立不相干的任务，任何一个任务出问题，并不会影响其他任务的工作。</p></li></ul><h3 id="协程的取消"><a href="#协程的取消" class="headerlink" title="协程的取消"></a>协程的取消</h3><p><strong>取消是协作的</strong></p><p>协程的取消是 协作 的。一段协程代码必须协作才能被取消。<br>所有 <strong>kotlinx.coroutines</strong> 中的挂起函数都是 可被取消的。<br>它们检查协程的取消， 并在取消时抛出 <strong>CancellationException</strong> 。<br>&nbsp;<br>示例：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>    <span class="token keyword">val</span> job1 <span class="token operator">=</span> launch <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ①</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ②</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    job1<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ③</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>执行结果：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token number">14</span><span class="token operator">:</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">604</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">1</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">645</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">3</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">50</span><span class="token operator">:</span><span class="token number">47</span><span class="token operator">:</span><span class="token number">647</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">4</span></code></pre><p>程序分析：<br>这段代码 ① 处启动了一个子协程，它内部先输出 1，接着开始 delay， delay 与线程的 sleep 不同，它不会阻塞线程。<br>你可以认为它实际上就是触发了一个延时任务，告诉协程调度系统 1000ms 之后再来执行后面的代码；</p><p>而在这期间，我们在 ③ 处对刚才启动的协程触发了取消，因此在 ② 处的 delay 还没有回调的时候协程就被取消了。<br>因为 delay 可以响应取消，因此 delay 后面的代码就不会再执行了，因为② 处的 delay 会抛一个 <strong>CancellationException</strong>。<br>&nbsp;<br>下面来捕获一下这个Exception：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>    <span class="token keyword">val</span> job1 <span class="token operator">=</span> launch <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// ①</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ②</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    job1<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ③</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token number">15</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">924</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">3</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">926</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">4</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">943</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">:</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>JobCancellationException<span class="token operator">:</span> Job was cancelled<span class="token punctuation">;</span> job<span class="token operator">=</span><span class="token string">"coroutine#2"</span><span class="token operator">:</span>StandaloneCoroutine<span class="token punctuation">{</span>Cancelling<span class="token punctuation">}</span><span class="token label symbol">@2be94b0f</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">25</span><span class="token operator">:</span><span class="token number">943</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job1$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">2</span></code></pre><p>&nbsp;<br>如果协程正在执行 计算任务，并且没有检查取消的话，那么它是不能被取消的。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//sampleStart</span>    <span class="token keyword">val</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> job <span class="token operator">=</span> <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> nextPrintTime <span class="token operator">=</span> startTime        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 一个执行计算的循环，只是为了占用 CPU</span>            <span class="token comment" spellcheck="true">// 每秒打印消息两次</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> nextPrintTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"job: I'm sleeping <span class="token interpolation"><span class="token delimiter variable">${</span>i<span class="token operator">++</span><span class="token delimiter variable">}</span></span> ..."</span><span class="token punctuation">)</span>                nextPrintTime <span class="token operator">+=</span> <span class="token number">500L</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 等待一段时间</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"main: I'm tired of waiting!"</span><span class="token punctuation">)</span>    job<span class="token punctuation">.</span><span class="token function">cancelAndJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 取消一个任务并且等待它结束</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"main: Now I can quit."</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//sampleEnd</span><span class="token punctuation">}</span></code></pre><p>输出结果：</p><pre><code>15:21:11:418 [DefaultDispatcher-worker-2 @coroutine#2] ConsoleExceptionDemoKt$main$1$job$1.invokeSuspend(ConsoleExceptionDemo.kt:16): job: I&#39;m sleeping 0 ...15:21:11:856 [DefaultDispatcher-worker-2 @coroutine#2] ConsoleExceptionDemoKt$main$1$job$1.invokeSuspend(ConsoleExceptionDemo.kt:16): job: I&#39;m sleeping 1 ...15:21:12:356 [DefaultDispatcher-worker-2 @coroutine#2] ConsoleExceptionDemoKt$main$1$job$1.invokeSuspend(ConsoleExceptionDemo.kt:16): job: I&#39;m sleeping 2 ...15:21:12:665 [main @coroutine#1] ConsoleExceptionDemoKt$main$1.invokeSuspend(ConsoleExceptionDemo.kt:22): main: I&#39;m tired of waiting!15:21:12:856 [DefaultDispatcher-worker-2 @coroutine#2] ConsoleExceptionDemoKt$main$1$job$1.invokeSuspend(ConsoleExceptionDemo.kt:16): job: I&#39;m sleeping 3 ...15:21:13:356 [DefaultDispatcher-worker-2 @coroutine#2] ConsoleExceptionDemoKt$main$1$job$1.invokeSuspend(ConsoleExceptionDemo.kt:16): job: I&#39;m sleeping 4 ...15:21:13:357 [main @coroutine#1] ConsoleExceptionDemoKt$main$1.invokeSuspend(ConsoleExceptionDemo.kt:24): main: Now I can quit.</code></pre><p>可以看到它连续打印出了“I’m sleeping” ，甚至在调用取消后， 任务仍然执行了五次循环迭代并运行到了它结束为止。<br>&nbsp;<br><strong>使计算代码可取消</strong></p><p>我们有两种方法来使执行计算的代码可以被取消。<br>第一种方法是定期调用挂起函数来检查取消。对于这种目的，使用 <strong>yield</strong> 是一个好的选择。<br>另一种方法是显式的检查取消状态。让我们试下第二种方法。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//sampleStart</span>    <span class="token keyword">val</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> job <span class="token operator">=</span> <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> nextPrintTime <span class="token operator">=</span> startTime        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>isActive<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 可以被取消的计算循环</span>            <span class="token comment" spellcheck="true">// 每秒打印消息两次</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> nextPrintTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"job: I'm sleeping <span class="token interpolation"><span class="token delimiter variable">${</span>i<span class="token operator">++</span><span class="token delimiter variable">}</span></span> ..."</span><span class="token punctuation">)</span>                nextPrintTime <span class="token operator">+=</span> <span class="token number">500L</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 等待一段时间</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"main: I'm tired of waiting!"</span><span class="token punctuation">)</span>    job<span class="token punctuation">.</span><span class="token function">cancelAndJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 取消一个任务并且等待它结束</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"main: Now I can quit."</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//sampleEnd</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token number">15</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">57</span><span class="token operator">:</span><span class="token number">214</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">:</span> job<span class="token operator">:</span> I'm sleeping <span class="token number">0</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">57</span><span class="token operator">:</span><span class="token number">649</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">:</span> job<span class="token operator">:</span> I'm sleeping <span class="token number">1</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">58</span><span class="token operator">:</span><span class="token number">149</span> <span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">:</span> job<span class="token operator">:</span> I'm sleeping <span class="token number">2</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">58</span><span class="token operator">:</span><span class="token number">460</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token operator">:</span> main<span class="token operator">:</span> I'm tired of waiting<span class="token operator">!</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">34</span><span class="token operator">:</span><span class="token number">58</span><span class="token operator">:</span><span class="token number">462</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">:</span> main<span class="token operator">:</span> Now I can quit<span class="token punctuation">.</span></code></pre><p>可以看到，现在循环被取消了。<strong>isActive</strong> 是一个可以被使用在 <strong>CoroutineScope</strong> 中的扩展属性。<br>&nbsp;<br><strong>在 finally 中释放资源</strong></p><p>可取消的挂起函数在被取消时会抛出 <strong>CancellationException</strong>，我们通常使用以下方式处理后续的收尾工作。</p><ul><li><strong>try {……} finally {……}</strong> 表达式<pre class=" language-kotlin"><code class="language-kotlin">  <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//sampleStart</span>      <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-></span>                  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"job: I'm sleeping <span class="token interpolation variable">$i</span> ..."</span><span class="token punctuation">)</span>                  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>              <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"job: I'm running finally"</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 延迟一段时间</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main: I'm tired of waiting!"</span><span class="token punctuation">)</span>      job<span class="token punctuation">.</span><span class="token function">cancelAndJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 取消该任务并且等待它结束</span>      <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main: Now I can quit."</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//sampleEnd</span>  <span class="token punctuation">}</span></code></pre>  运行结果：<pre class=" language-kotlin"><code class="language-kotlin">  <span class="token number">16</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">647</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">:</span> job<span class="token operator">:</span> I'm sleeping <span class="token number">0</span> <span class="token operator">..</span><span class="token punctuation">.</span>  <span class="token number">16</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">38</span><span class="token operator">:</span><span class="token number">162</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">:</span> job<span class="token operator">:</span> I'm sleeping <span class="token number">1</span> <span class="token operator">..</span><span class="token punctuation">.</span>  <span class="token number">16</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">38</span><span class="token operator">:</span><span class="token number">662</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">:</span> job<span class="token operator">:</span> I'm sleeping <span class="token number">2</span> <span class="token operator">..</span><span class="token punctuation">.</span>  <span class="token number">16</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">38</span><span class="token operator">:</span><span class="token number">898</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token operator">:</span> main<span class="token operator">:</span> I'm tired of waiting<span class="token operator">!</span>  <span class="token number">16</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">38</span><span class="token operator">:</span><span class="token number">948</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token operator">:</span> job<span class="token operator">:</span> I'm running <span class="token keyword">finally</span>  <span class="token number">16</span><span class="token operator">:</span><span class="token number">04</span><span class="token operator">:</span><span class="token number">38</span><span class="token operator">:</span><span class="token number">953</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">:</span> main<span class="token operator">:</span> Now I can quit<span class="token punctuation">.</span></code></pre>  &nbsp;</li><li>Kotlin 的 <strong>use</strong> 函数<br>  实现了 <strong>Closeable</strong> 接口的对象可调用use函数<br>  <strong>use</strong> 函数会自动关闭调用者（无论中间是否出现异常）<br>  &nbsp;<pre class=" language-kotlin"><code class="language-kotlin">  <span class="token annotation builtin">@RequireKotlin</span><span class="token punctuation">(</span><span class="token string">"1.2"</span><span class="token punctuation">,</span> versionKind <span class="token operator">=</span> RequireKotlinVersionKind<span class="token punctuation">.</span>COMPILER_VERSION<span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"Requires newer compiler version to be inlined correctly."</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> Closeable<span class="token operator">?</span><span class="token punctuation">,</span> R<span class="token operator">></span> T<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> R<span class="token punctuation">)</span><span class="token operator">:</span> R <span class="token punctuation">{</span>      <span class="token keyword">var</span> exception<span class="token operator">:</span> Throwable<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>          exception <span class="token operator">=</span> e          <span class="token keyword">throw</span> e      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>          <span class="token keyword">when</span> <span class="token punctuation">{</span>              <span class="token function">apiVersionIsAtLeast</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeFinally</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span>              <span class="token keyword">this</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">-></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>              exception <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">-></span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token keyword">else</span> <span class="token operator">-></span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>closeException<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment" spellcheck="true">// cause.addSuppressed(closeException) // ignored here</span>                  <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre>  可以看出，<strong>use</strong> 函数内部实现也是通过 <strong>try-catch-finally</strong> 块捕捉的方式。<br>  所以不用担心会有异常抛出导致程序退出，无论是正常结束还是出现异常，都能正确关闭调用者。</li></ul><p>&nbsp;<br><strong>运行不可取消的代码块</strong></p><p>在之前例子中任何尝试在 finally 块中调用<strong>挂起函数</strong>的代码都会抛出 <strong>CancellationException</strong>，因为运行此代码的协程被取消了。</p><p>所以良好的关闭操作（关闭一个文件、取消一个任务、或是关闭任何一种 通信通道）通常都是非阻塞的，并且不会调用任何挂起函数。</p><p>然而，在真实的案例中，当你需要在一个 <strong>被取消的协程</strong> 中调用挂起函数， 你可以将相应的代码包装在 <strong>withContext(NonCancellable) {……}</strong> 中。</p><p>使用 <strong>withContext</strong> 函数以及 <strong>NonCancellable</strong> 上下文，见如下示例所示：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//sampleStart</span>    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-></span>                Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"job: I'm sleeping <span class="token interpolation variable">$i</span> ..."</span><span class="token punctuation">)</span>                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">withContext</span><span class="token punctuation">(</span>NonCancellable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"job: I'm running finally"</span><span class="token punctuation">)</span>                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//此处调用挂起函数</span>                Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"job: And I've just delayed for 1 sec because I'm non-cancellable"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 延迟一段时间</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"main: I'm tired of waiting!"</span><span class="token punctuation">)</span>    job<span class="token punctuation">.</span><span class="token function">cancelAndJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 取消该任务并等待它结束</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"main: Now I can quit."</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//sampleEnd</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token number">16</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">683</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">:</span> job<span class="token operator">:</span> I'm sleeping <span class="token number">0</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">199</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">:</span> job<span class="token operator">:</span> I'm sleeping <span class="token number">1</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">700</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">:</span> job<span class="token operator">:</span> I'm sleeping <span class="token number">2</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">931</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token operator">:</span> main<span class="token operator">:</span> I'm tired of waiting<span class="token operator">!</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">990</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span>$<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token operator">:</span> job<span class="token operator">:</span> I'm running <span class="token keyword">finally</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">38</span><span class="token operator">:</span><span class="token number">991</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$job$<span class="token number">1</span>$<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token operator">:</span> job<span class="token operator">:</span> And I<span class="token string">'ve just delayed for 1 sec because I'</span>m non<span class="token operator">-</span>cancellable<span class="token number">16</span><span class="token operator">:</span><span class="token number">33</span><span class="token operator">:</span><span class="token number">39</span><span class="token operator">:</span><span class="token number">001</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">:</span> main<span class="token operator">:</span> Now I can quit<span class="token punctuation">.</span></code></pre><p>&nbsp;<br><strong>超时取消</strong></p><p>在大多数情况下，取消协程的执行是因为它执行的时间超过预期的时间了。<br>虽然，你可以手动获取到协程相应 <strong>Job</strong> 对象的引用，并启动另外一个协程在延迟一段时间后通过 <strong>Job</strong> 对象取消那个协程。<br>然而Kotlin协程库已经为我们准备好 <strong>withTimeout</strong> 函数来做这件事。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//sampleStart</span>    <span class="token function">withTimeout</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-></span>            Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"I'm sleeping <span class="token interpolation variable">$i</span> ..."</span><span class="token punctuation">)</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//sampleEnd</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token number">17</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">826</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">:</span> I'm sleeping <span class="token number">0</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">343</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">:</span> I'm sleeping <span class="token number">1</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token number">17</span><span class="token operator">:</span><span class="token number">02</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">844</span> <span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> ConsoleExceptionDemoKt$main$<span class="token number">1</span>$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">invokeSuspend</span><span class="token punctuation">(</span>ConsoleExceptionDemo<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">:</span> I'm sleeping <span class="token number">2</span> <span class="token operator">..</span><span class="token punctuation">.</span>Exception <span class="token keyword">in</span> thread <span class="token string">"main"</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>TimeoutCancellationException<span class="token operator">:</span> Timed <span class="token keyword">out</span> waiting <span class="token keyword">for</span> <span class="token number">1300</span> ms    at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>TimeoutKt<span class="token punctuation">.</span><span class="token function">TimeoutCancellationException</span><span class="token punctuation">(</span>Timeout<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">128</span><span class="token punctuation">)</span>    at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>TimeoutCoroutine<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Timeout<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">94</span><span class="token punctuation">)</span>    at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>EventLoopImplBase$DelayedRunnableTask<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EventLoop<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">307</span><span class="token punctuation">)</span>    at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>EventLoopImplBase<span class="token punctuation">.</span><span class="token function">processNextEvent</span><span class="token punctuation">(</span>EventLoop<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">116</span><span class="token punctuation">)</span>    at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>DefaultExecutor<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DefaultExecutor<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">68</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">745</span><span class="token punctuation">)</span></code></pre><p><strong>withTimeout</strong> 抛出的 <strong>TimeoutCancellationException</strong> 是 <strong>CancellationException</strong> 的子类。<br>我们之前没有看到它的堆栈跟踪打印在控制台上。<br>这是因为在取消的协程中，<strong>CancellationException</strong> 被认为是协程完成的正常原因。<br>但是，在这个例子中，我们在main函数中使用了 <strong>withTimeout</strong>。</p><p>&nbsp;<br><strong>自定义可取消的挂起函数</strong></p><p><strong>delay</strong> 可以响应取消操作，看下 <strong>delay</strong> 函数的实现：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> suspend <span class="token keyword">fun</span> <span class="token function">delay</span><span class="token punctuation">(</span>timeMillis<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeMillis <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// don't delay</span>    <span class="token keyword">return</span> suspendCancellableCoroutine <span class="token label symbol">sc@</span> <span class="token punctuation">{</span> cont<span class="token operator">:</span> CancellableContinuation<span class="token operator">&lt;</span>Unit<span class="token operator">></span> <span class="token operator">-></span>        cont<span class="token punctuation">.</span>context<span class="token punctuation">.</span>delay<span class="token punctuation">.</span><span class="token function">scheduleResumeAfterDelay</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">,</span> cont<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>关键部分是其使用 <strong>suspendCancellableCoroutine</strong> 这个挂起内联函数给包装了一下。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * Suspends coroutine similar to [suspendCoroutine], but provide an implementation of [CancellableContinuation] to * the [block]. This function throws [CancellationException] if the coroutine is cancelled or completed while suspended. */</span><span class="token keyword">public</span> suspend <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">suspendCancellableCoroutine</span><span class="token punctuation">(</span>    <span class="token keyword">crossinline</span> block<span class="token operator">:</span> <span class="token punctuation">(</span>CancellableContinuation<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span>    suspendCoroutineUninterceptedOrReturn <span class="token punctuation">{</span> uCont <span class="token operator">-></span>        <span class="token keyword">val</span> cancellable <span class="token operator">=</span> <span class="token function">CancellableContinuationImpl</span><span class="token punctuation">(</span>uCont<span class="token punctuation">.</span><span class="token function">intercepted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resumeMode <span class="token operator">=</span> MODE_CANCELLABLE<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// NOTE: Before version 1.1.0 the following invocation was inlined here, so invocation of this</span>        <span class="token comment" spellcheck="true">// method indicates that the code was compiled by kotlinx.coroutines &lt; 1.1.0</span>        <span class="token comment" spellcheck="true">// cancellable.initCancellability()</span>        <span class="token function">block</span><span class="token punctuation">(</span>cancellable<span class="token punctuation">)</span>        cancellable<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>包括其他的可取消的挂起函数都是使用 <strong>suspendCancellableCoroutine</strong> 进行了封装。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829153319.png" alt></p><p>自定义可取消的挂起函数：</p><p>使用Retrofit创建一个网络请求接口：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> okhttp3<span class="token punctuation">.</span>OkHttpClient<span class="token keyword">import</span> retrofit2<span class="token punctuation">.</span>Call<span class="token keyword">import</span> retrofit2<span class="token punctuation">.</span>converter<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>GsonConverterFactory<span class="token keyword">import</span> retrofit2<span class="token punctuation">.</span>http<span class="token punctuation">.</span>GET<span class="token keyword">import</span> retrofit2<span class="token punctuation">.</span>http<span class="token punctuation">.</span>Path<span class="token keyword">val</span> gitHubServiceApi <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>    <span class="token keyword">val</span> retrofit <span class="token operator">=</span> retrofit2<span class="token punctuation">.</span>Retrofit<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">client</span><span class="token punctuation">(</span>OkHttpClient<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addConverterFactory</span><span class="token punctuation">(</span>GsonConverterFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    retrofit<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>GitHubServiceApi<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">interface</span> GitHubServiceApi <span class="token punctuation">{</span>    <span class="token annotation builtin">@GET</span><span class="token punctuation">(</span><span class="token string">"users/{login}"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation builtin">@Path</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">)</span> login<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Call<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">}</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> url<span class="token operator">:</span> String<span class="token punctuation">)</span></code></pre><p>&nbsp;<br>普通调用的代码：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> callback <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> Callback<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">,</span> t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"onFailure: <span class="token interpolation variable">$t</span>"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">,</span> response<span class="token operator">:</span> Response<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"onResponse: <span class="token interpolation"><span class="token delimiter variable">${</span>response<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>isSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                Logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token function">HttpException</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    gitHubServiceApi<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token string">"JakeWharton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p> 运行结果：</p><pre><code>15:28:33:274 [OkHttp https://api.github.com/...] GitHubServiceKt$main$1.onResponse(GitHubService.kt:36): onResponse: 20015:28:33:292 [OkHttp https://api.github.com/...] GitHubServiceKt$main$1.onResponse(GitHubService.kt:38): User(id=66577, name=Jake Wharton, url=https://api.github.com/users/JakeWharton)</code></pre><p>&nbsp;<br>转换成可取消的挂起函数：</p><pre class=" language-kotlin"><code class="language-kotlin">suspend <span class="token keyword">fun</span> <span class="token function">getUser</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> suspendCancellableCoroutine<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span> continuation <span class="token operator">-></span>    <span class="token keyword">val</span> call <span class="token operator">=</span> gitHubServiceApi<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    continuation<span class="token punctuation">.</span><span class="token function">invokeOnCancellation</span> <span class="token punctuation">{</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"invokeOnCancellation: cancel the request."</span><span class="token punctuation">)</span>        call<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    call<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Callback<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">,</span> t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"onFailure: <span class="token interpolation variable">$t</span>"</span><span class="token punctuation">)</span>            continuation<span class="token punctuation">.</span><span class="token function">resumeWithException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">,</span> response<span class="token operator">:</span> Response<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"onResponse: <span class="token interpolation"><span class="token delimiter variable">${</span>response<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>isSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span>                response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">?:</span> continuation<span class="token punctuation">.</span><span class="token function">resumeWithException</span><span class="token punctuation">(</span>                    <span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"User is Null"</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                continuation<span class="token punctuation">.</span><span class="token function">resumeWithException</span><span class="token punctuation">(</span><span class="token function">HttpException</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>&nbsp;<br>在协程中调用并且取消：</p><pre class=" language-kotlin"><code class="language-kotlin">suspend <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> job <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> user <span class="token operator">=</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token string">"JakeWharton"</span><span class="token punctuation">)</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    job<span class="token punctuation">.</span><span class="token function">cancelAndJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>15:53:07:886 [main] ConsoleCancellableKt.main(ConsoleCancellable.kt:15): 215:53:07:886 [DefaultDispatcher-worker-1] ConsoleCancellableKt$main$job$1.invokeSuspend(ConsoleCancellable.kt:11): 115:53:08:450 [DefaultDispatcher-worker-1] GetUserKt$getUser$2$1.invoke(GetUser.kt:18): invokeOnCancellation: cancel the request.15:53:08:453 [DefaultDispatcher-worker-1] ConsoleCancellableKt.main(ConsoleCancellable.kt:17): 315:53:08:454 [OkHttp https://api.github.com/...] GetUserKt$getUser$2$2.onFailure(GetUser.kt:24): onFailure: java.io.IOException: Canceled</code></pre><p>从日志中看到，取消的回调被调用了，OkHttp 也确实停止了网络请求，并且回调给我们一个 IO 异常，这时候我们的协程已经被取消。</p><p>在处于 <strong>取消状态的协程</strong> 上调用 <strong>Continuation.resume</strong> 、 <strong>Continuation.resumeWithException</strong> 或者 <strong>Continuation.resumeWith</strong> 都会被忽略。<br>因此 OkHttp 回调中我们收到 IO 异常后调用的 <strong>continuation.resumeWithException(e)</strong> 不会有任何副作用。<br>&nbsp;<br>Retrofit 2.6.0中使用了协程，也是用了同样的方式。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829153318.png" alt></p><pre class=" language-kotlin"><code class="language-kotlin">suspend <span class="token keyword">fun</span> <span class="token function">launchForEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    coroutineScope <span class="token punctuation">{</span>        launch <span class="token punctuation">{</span>            <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"JakeWharton"</span><span class="token punctuation">,</span> <span class="token string">"abreslav"</span><span class="token punctuation">,</span> <span class="token string">"yole"</span><span class="token punctuation">,</span> <span class="token string">"elizarov"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">val</span> user <span class="token operator">=</span> gitHubServiceApi<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                    <span class="token punctuation">}</span>                    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>14:07:31:568 [OkHttp https://api.github.com/...] GitHubServiceKt$gitHubServiceApi$2$retrofit$1.intercept(GitHubService.kt:19): request: 20014:07:31:587 [main] Demo0Kt$launchForEach$2$1.invokeSuspend(Demo0.kt:16): User(id=66577, name=Jake Wharton, url=https://api.github.com/users/JakeWharton)14:07:32:931 [OkHttp https://api.github.com/...] GitHubServiceKt$gitHubServiceApi$2$retrofit$1.intercept(GitHubService.kt:19): request: 20014:07:32:933 [main] Demo0Kt$launchForEach$2$1.invokeSuspend(Demo0.kt:16): User(id=888318, name=Andrey Breslav, url=https://api.github.com/users/abreslav)14:07:34:285 [OkHttp https://api.github.com/...] GitHubServiceKt$gitHubServiceApi$2$retrofit$1.intercept(GitHubService.kt:19): request: 20014:07:34:287 [main] Demo0Kt$launchForEach$2$1.invokeSuspend(Demo0.kt:16): User(id=46553, name=Dmitry Jemerov, url=https://api.github.com/users/yole)14:07:35:626 [OkHttp https://api.github.com/...] GitHubServiceKt$gitHubServiceApi$2$retrofit$1.intercept(GitHubService.kt:19): request: 20014:07:35:636 [main] Demo0Kt$launchForEach$2$1.invokeSuspend(Demo0.kt:16): User(id=478679, name=Roman Elizarov, url=https://api.github.com/users/elizarov)</code></pre><h3 id="Android中使用协程"><a href="#Android中使用协程" class="headerlink" title="Android中使用协程"></a>Android中使用协程</h3><p><strong>引入协程库</strong></p><pre class=" language-gradle"><code class="language-gradle">dependencies {  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.2.2'}</code></pre><p><strong>kotlinx-coroutines-android</strong> 依赖的库：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829153315.png" alt><br><strong>kotlinx-coroutines-android</strong> 这个库里面的代码很少，协程的大部分实现都在 <strong>kotlinx-coroutines-core</strong> 这个库里。</p><p>&nbsp;<br><strong>任务调度器</strong></p><p><strong>kotlinx-coroutines-android</strong> 提供了 <strong>Dispatchers.Main</strong> 调度器 在Android平台上的实现 <strong>HandlerDispatcher</strong>。<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829153316.png" alt></p><p>可以从源码上看到，任务的调度都是通过 <strong>Handler</strong> 来实现：<br><img src="https://cdn.jsdelivr.net/gh/congwiny/BlogPics@master/img/20190829153320.png" alt><br>&nbsp;<br><strong>UI 生命周期作用域</strong></p><p>在Android中， 我们想让发出去的请求能够在当前 UI 或者 Activity 退出或者销毁的时候能够自动取消，就要与其生命周期绑定。<br>协程有一个很天然的特性能刚够支持这一点，那就是作用域。官方也提供了 <strong>MainScope</strong> 这个函数。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * Creates the main [CoroutineScope] for UI components. * * Example of use: * ``` * class MyAndroidActivity { *   private val scope = MainScope() * *   override fun onDestroy() { *     super.onDestroy() *     scope.cancel() *   } * } * * ``` * * The resulting scope has [SupervisorJob] and [Dispatchers.Main] context elements. * If you want to append additional elements to the main scope, use [CoroutineScope.plus] operator: * `val scope = MainScope() + CoroutineName("MyActivity")`. */</span><span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"FunctionName"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">MainScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> CoroutineScope <span class="token operator">=</span> <span class="token function">ContextScope</span><span class="token punctuation">(</span><span class="token function">SupervisorJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">)</span></code></pre><p>从 <strong>MainScope</strong> 的源码可以看到，<strong>MainScope</strong> 是由 <strong>SupervisorJob()</strong> 和 <strong>Dispatchers.Main</strong> 共同完成。<br>使用 <strong>SupervisorJob</strong> 保证子任务失败不会导致父任务被取消；父任务能够取消所有的子任务。<br>使用 <strong>Dispatchers.Main</strong> 让协程体运行在主线程中。因此作用域内除非明确声明调度器，协程体都调度在主线程执行。</p><p>&nbsp;<br>示例：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> mainScope <span class="token operator">=</span> <span class="token function">MainScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//启动一个协程</span>            mainScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>                Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                textView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//任务调度在IO线程池</span>                    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//模拟耗时操作</span>                    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                    <span class="token string">"Hello Coroutines"</span>                <span class="token punctuation">}</span>                Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        mainScope<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Activity退出时取消协程</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>D/Coroutine: [main] MainActivity$onCreate$1$1.invokeSuspend(MainActivity.kt:19): 1D/Coroutine: [DefaultDispatcher-worker-1] MainActivity$onCreate$1$1$1.invokeSuspend(MainActivity.kt:21): 2D/Coroutine: [DefaultDispatcher-worker-2] MainActivity$onCreate$1$1$1.invokeSuspend(MainActivity.kt:23): 3D/Coroutine: [main] MainActivity$onCreate$1$1.invokeSuspend(MainActivity.kt:26): 4</code></pre><p>&nbsp;<br><strong>带有作用域的抽象Activity</strong></p><p>尽管我们在上面直接使用 <strong>MainScope</strong> 可以很方便的控制其作用域范围内的协程的取消，<br>以及能够无缝将异步任务切回主线程，这都是我们想要的特性，不过写法上还是不够美观。</p><p>官方推荐我们定义一个抽象的 Activity，例如：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">abstract</span> <span class="token keyword">class</span> ScopedActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CoroutineScope <span class="token keyword">by</span> <span class="token function">MainScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样在 Activity 退出的时候，对应的作用域就会被取消，所有在该 Activity 中发起的请求都会被取消掉。<br>使用时，只需要继承这个抽象类即可：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> CoroutineActivity <span class="token operator">:</span> <span class="token function">ScopedActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//启动一个协程</span>            launch <span class="token punctuation">{</span>                Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                textView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//任务调度在IO线程池</span>                    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//模拟耗时操作</span>                    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                    <span class="token string">"Hello Coroutines"</span>                <span class="token punctuation">}</span>                Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>除了在当前 Activity 内部获得 <strong>MainScope</strong> 的能力外，还可以将这个 作用域 实例传递给其他需要的模块。</p><p>例如 Presenter 通常也需要与 Activity保持同样的生命周期，因此必要时也可以将该作用域传递过去：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> CoroutineActivity <span class="token operator">:</span> <span class="token function">ScopedActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//启动一个协程</span>            launch <span class="token punctuation">{</span>                Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                textView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//任务调度在IO线程池</span>                    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//模拟耗时操作</span>                    Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                    <span class="token string">"Hello Coroutines"</span>                <span class="token punctuation">}</span>                Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        next<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"Get User Data"</span>        next<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>            <span class="token function">CoroutinePresenter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@CoroutineActivity</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserData</span><span class="token punctuation">(</span>textView<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">CoroutinePresenter</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> scope<span class="token operator">:</span> CoroutineScope<span class="token punctuation">)</span> <span class="token operator">:</span> CoroutineScope <span class="token keyword">by</span> scope <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">getUserData</span><span class="token punctuation">(</span>textView<span class="token operator">:</span> TextView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        launch <span class="token punctuation">{</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>            Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>            textView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">"Kotlin Coroutines"</span>        <span class="token punctuation">}</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>多数情况下，Presenter 的方法也会被 Activity 直接调用，因此也可以将 Presenter 的方法生命成 <strong>suspend</strong> 方法，<br>然后用 <strong>coroutineScope</strong> 嵌套作用域，这样 <strong>MainScope</strong> 被取消后，嵌套的子作用域一样也会被取消，进而达到取消全部子协程的目的：</p><pre class=" language-kotlin"><code class="language-kotlin">next<span class="token punctuation">.</span><span class="token function">setOnLongClickListener</span> <span class="token punctuation">{</span>    launch <span class="token punctuation">{</span>        <span class="token keyword">val</span> <span class="token keyword">data</span> <span class="token operator">=</span>  <span class="token function">CoroutinePresenter2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"set User data"</span><span class="token punctuation">)</span>        textView<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token keyword">data</span>        textView<span class="token punctuation">.</span><span class="token function">setTextColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> CoroutinePresenter2 <span class="token punctuation">{</span>    suspend <span class="token keyword">fun</span> <span class="token function">getUserData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> coroutineScope<span class="token punctuation">{</span>        Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"start get user data"</span><span class="token punctuation">)</span>        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> deferred <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>            Logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"return user data"</span><span class="token punctuation">)</span>            <span class="token string">"User Data is Empty"</span>        <span class="token punctuation">}</span>        deferred<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出log：</p><pre><code>D/Coroutine: [main] CoroutinePresenter2$getUserData$2.invokeSuspend(CoroutinePresenter2.kt:9): start get user dataD/Coroutine: [DefaultDispatcher-worker-1] CoroutinePresenter2$getUserData$2$deferred$1.invokeSuspend(CoroutinePresenter2.kt:13): return user dataD/Coroutine: [main] CoroutineActivity$onCreate$3$1.invokeSuspend(CoroutineActivity.kt:42): set User data</code></pre><p>&nbsp;<br>总结：</p><p>在 Android 上使用协程，更多的就是简化异步逻辑，把异步的代码改成同步的写法。<br>协程为我们提供了 <strong>Dispatchers.Main</strong> 调度器，让我们的UI 逻辑在 UI 线程中处理。<br>如果涉及到一些 io 操作，使用 <strong>async</strong> 将其调度到 <strong>Dispatchers.IO</strong> 上，结果返回时协程会自动帮我们切回到主线程。<br>对于一些 UI 不相关的逻辑，通常使用 <strong>Dispatchers.Default</strong> 就足够使用了。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kotlin </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
